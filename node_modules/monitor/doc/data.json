{
    "project": {
        "name": "monitor",
        "description": "Monitor",
        "version": "0.6.1",
        "year": "2013",
        "url": "http://lorenwest.github.com/node-monitor",
        "logo": "",
        "themedir": "./config/doc"
    },
    "files": {
        "lib/probes/FileProbe.js": {
            "name": "lib/probes/FileProbe.js",
            "modules": {},
            "classes": {
                "FileProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/FileSyncProbe.js": {
            "name": "lib/probes/FileSyncProbe.js",
            "modules": {},
            "classes": {
                "FileSyncProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/InspectProbe.js": {
            "name": "lib/probes/InspectProbe.js",
            "modules": {},
            "classes": {
                "InspectProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/LogProbe.js": {
            "name": "lib/probes/LogProbe.js",
            "modules": {},
            "classes": {
                "LogProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/PollingProbe.js": {
            "name": "lib/probes/PollingProbe.js",
            "modules": {},
            "classes": {
                "PollingProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/ProcessProbe.js": {
            "name": "lib/probes/ProcessProbe.js",
            "modules": {},
            "classes": {
                "ProcessProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/ReplProbe.js": {
            "name": "lib/probes/ReplProbe.js",
            "modules": {},
            "classes": {
                "ReplProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/StatProbe.js": {
            "name": "lib/probes/StatProbe.js",
            "modules": {},
            "classes": {
                "StatProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/StreamProbe.js": {
            "name": "lib/probes/StreamProbe.js",
            "modules": {},
            "classes": {
                "StreamProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/probes/SyncProbe.js": {
            "name": "lib/probes/SyncProbe.js",
            "modules": {},
            "classes": {
                "SyncProbe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Connection.js": {
            "name": "lib/Connection.js",
            "modules": {
                "Monitor": 1
            },
            "classes": {
                "Connection": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Log.js": {
            "name": "lib/Log.js",
            "modules": {},
            "classes": {
                "Log": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Monitor.js": {
            "name": "lib/Monitor.js",
            "modules": {},
            "classes": {
                "Monitor": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Probe.js": {
            "name": "lib/Probe.js",
            "modules": {},
            "classes": {
                "Probe": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Router.js": {
            "name": "lib/Router.js",
            "modules": {},
            "classes": {
                "Router": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Server.js": {
            "name": "lib/Server.js",
            "modules": {},
            "classes": {
                "Server": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Stat.js": {
            "name": "lib/Stat.js",
            "modules": {},
            "classes": {
                "Stat": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/Sync.js": {
            "name": "lib/Sync.js",
            "modules": {},
            "classes": {
                "Sync": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/ConnectionTest.js": {
            "name": "test/ConnectionTest.js",
            "modules": {},
            "classes": {
                "ConnectionTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/FileProbeTest.js": {
            "name": "test/FileProbeTest.js",
            "modules": {},
            "classes": {
                "FileProbeTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/InspectTest.js": {
            "name": "test/InspectTest.js",
            "modules": {},
            "classes": {
                "InspectTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/LogTest.js": {
            "name": "test/LogTest.js",
            "modules": {},
            "classes": {
                "LogTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/MonitorTest.js": {
            "name": "test/MonitorTest.js",
            "modules": {},
            "classes": {
                "MonitorTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/ProbeTest.js": {
            "name": "test/ProbeTest.js",
            "modules": {},
            "classes": {
                "ProbeTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/RouterTest.js": {
            "name": "test/RouterTest.js",
            "modules": {},
            "classes": {
                "RouterTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/ServerTest.js": {
            "name": "test/ServerTest.js",
            "modules": {},
            "classes": {
                "ServerTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/StatTest.js": {
            "name": "test/StatTest.js",
            "modules": {},
            "classes": {
                "StatTest": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/SyncProbeTest.js": {
            "name": "test/SyncProbeTest.js",
            "modules": {},
            "classes": {
                "SyncProbeTest": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Monitor": {
            "name": "Monitor",
            "submodules": {},
            "classes": {
                "FileProbe": 1,
                "FileSyncProbe": 1,
                "InspectProbe": 1,
                "LogProbe": 1,
                "PollingProbe": 1,
                "ProcessProbe": 1,
                "ReplProbe": 1,
                "StatProbe": 1,
                "StreamProbe": 1,
                "SyncProbe": 1,
                "Connection": 1,
                "Log": 1,
                "Monitor": 1,
                "Probe": 1,
                "Router": 1,
                "Server": 1,
                "Stat": 1,
                "Sync": 1,
                "ConnectionTest": 1,
                "FileProbeTest": 1,
                "InspectTest": 1,
                "LogTest": 1,
                "MonitorTest": 1,
                "ProbeTest": 1,
                "RouterTest": 1,
                "ServerTest": 1,
                "StatTest": 1,
                "SyncProbeTest": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "test/SyncProbeTest.js",
            "line": 41,
            "description": "Core monitor classes\n\nClasses in this module represent baseline monitor functionality.  They can\nbe loaded and run in a node.js container as well as within a browser."
        }
    },
    "classes": {
        "FileProbe": {
            "name": "FileProbe",
            "shortname": "FileProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/FileProbe.js",
            "line": 20,
            "description": "Probe for monitoring a file on the O/S.\n\nThis probe monitors a file for changes.  It can either contain the full file\ncontents, or the most recent file changes.\n\nFor security purposes, this probe is disabled by default.  The application\nserver must set the root directory path using ```setRootPath()``` before\nthe probe will operate.\n\nTo enable FileProbe on the server:\n\n    // Enable the File probe under the user home directory\n    var Monitor = require('monitor');\n    Monitor.FileProbe.setRootPath('/home/public');\n\nThis class also contains server-side utility methods for file and\ndirectory manipulation.\n\nUsing the FileProbe (client or server):\n\n    // Watch the template for changes\n    var indexTemplate = new Monitor({\n      probeClass: 'File',\n      initParams: {\n        path: 'templates/index.html'\n      }\n    });\n    indexTemplate.connect(function(error) {\n      console.log(\"Connected\");\n    });\n\nOnce connected, the ```text``` field of ```indexTemplate``` will be set to\nthe file contents, and the ```change``` listener will fire whenever the\nserver detects a change in the template file.",
            "extends": "Probe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "Remote initialization parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "path",
                            "description": "Path to the file beneath the server-specified root path.",
                            "type": "String"
                        },
                        {
                            "name": "tail",
                            "description": "false:text contains current file content, true: text contains last changes.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "Monitor data model elements",
                    "type": "Object",
                    "props": [
                        {
                            "name": "text",
                            "description": "Full file contents, or last file changes.",
                            "type": "String"
                        },
                        {
                            "name": "error",
                            "description": "File read errors.",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "FileSyncProbe": {
            "name": "FileSyncProbe",
            "shortname": "FileSyncProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/FileSyncProbe.js",
            "line": 20,
            "description": "Probe for synchronizing a Backbone data model with a file on the O/S\n\nProbe parameters are listed under <a href=\"SyncProbe.html\">SyncProbe</a>.",
            "extends": "Probe",
            "is_constructor": 1
        },
        "InspectProbe": {
            "name": "InspectProbe",
            "shortname": "InspectProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/InspectProbe.js",
            "line": 20,
            "description": "Inspect and manipulate variables on the monitored server.\n\nThis class monitors the variable specified by the key.\n\nThe key is evaluated to determine the variable to monitor, so it may\nbe a complex key starting at global scope.  If the key isn't\nspecified, it monitors all variables in the global scope.\n\nIf the key points to an object of type Backbone.Model, this probe\nwill update the value in real time, triggered on the *change* event.\nOtherwise it will update the value as it notices changes, while polling\non the specified polling interval (default: 1 second).",
            "extends": "PollingProbe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "- Initialization parameters",
                    "optional": true,
                    "props": [
                        {
                            "name": "key",
                            "description": "A global variable name or expression",
                            "type": "String",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "depth",
                            "description": "If the key points to an object, this\n      is the depth to traverse the object for changes.  Default=2, or 1 if\n      key='window'.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "2"
                        },
                        {
                            "name": "pollInterval",
                            "description": "(from <a href=\"PollingProbe.html\">PollingProbe</a>) Polling interval in milliseconds. Default: null",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "cronPattern",
                            "description": "(from <a href=\"PollingProbe.html\">PollingProbe</a>) Crontab syle polling pattern. Default once per second: \"* * * * * *\"",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "- Monitor data model elements",
                    "props": [
                        {
                            "name": "value",
                            "description": "- The value of the element being inspected"
                        },
                        {
                            "name": "isModel",
                            "description": "- Is the value a Backbone.Model?"
                        }
                    ]
                }
            ]
        },
        "LogProbe": {
            "name": "LogProbe",
            "shortname": "LogProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/LogProbe.js",
            "line": 16,
            "description": "Remote application log monitoring\n\nThis probe forwards application logs to the monitor.",
            "extends": "StreamProbe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "Probe initialization parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "pattern",
                            "description": "Log name pattern to monitor (see <a href=\"Log.html\">Log</a>)",
                            "type": "String",
                            "optional": true,
                            "optdefault": "*"
                        },
                        {
                            "name": "interval",
                            "description": "Queue interval (see <a href=\"StreamProbe.html\">StreamProbe</a>)",
                            "type": "Numeric",
                            "optional": true,
                            "optdefault": "1000"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "Monitor data model elements",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bundle",
                            "description": "Array of Log elements.",
                            "type": "Log array",
                            "props": [
                                {
                                    "name": "timestamp",
                                    "description": "Timestamp of the log statement",
                                    "type": "String"
                                },
                                {
                                    "name": "logType",
                                    "description": "Log type (error, info, etc)",
                                    "type": "String"
                                },
                                {
                                    "name": "module",
                                    "description": "Module that emitted the log",
                                    "type": "String"
                                },
                                {
                                    "name": "name",
                                    "description": "Log entry name",
                                    "type": "String"
                                },
                                {
                                    "name": "args",
                                    "description": "Arguments to the log statement",
                                    "type": "Any[]"
                                }
                            ]
                        },
                        {
                            "name": "sequence",
                            "description": "A numeric incrementer causing a change event",
                            "type": "Integer"
                        }
                    ]
                }
            ]
        },
        "PollingProbe": {
            "name": "PollingProbe",
            "shortname": "PollingProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/PollingProbe.js",
            "line": 15,
            "description": "## Base class for probes that require polling to detect and set model changes.\n\nThe probe wakes up every polling interval and executes the poll() method\nin the derived class.\n\nPollingProbes are instantiated with either a polling interval (in milliseconds)\nor a cron pattern.  If the polling interval is set, that's what will be used.\n\nThe cronPattern isn't available in browser-side probes.\n\nTo disable polling, set the pollInterval to 0.\n\nMore about cron formats, with examples\n<ul>\n  <li><a href=\"http://crontab.org/\">http://crontab.org/</a></li>\n  <li><a href=\"http://en.wikipedia.org/wiki/Cron\">http://en.wikipedia.org/wiki/Cron</a></li></li>\n  <li><a href=\"http://www.adminschoice.com/crontab-quick-reference\">http://www.adminschoice.com/crontab-quick-reference</a></li></li>\n</ul>",
            "extends": "Probe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "Probe initialization parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "pollInterval",
                            "description": "Polling interval in milliseconds. Default: null",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "cronPattern",
                            "description": "Crontab syle polling pattern. Default once per second: \"* * * * * *\"\n\n  The format is: <i>[second] [minute] [hour] [day of month] [month] [day of week]</i>.<br>",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "ProcessProbe": {
            "name": "ProcessProbe",
            "shortname": "ProcessProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/ProcessProbe.js",
            "line": 13,
            "description": "Probe for attaining process and O/S information",
            "extends": "PollingProbe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "Probe initialization parameters (from PollingProbe)",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "pollInterval",
                            "description": "Polling interval in milliseconds. Default: null",
                            "type": "Integer",
                            "optional": true
                        },
                        {
                            "name": "cronPattern",
                            "description": "Crontab syle polling pattern. Default once per second: \"* * * * * *\"",
                            "type": "String",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "Monitor data model elements",
                    "type": "Object",
                    "props": [
                        {
                            "name": "platform",
                            "description": "O/S Platform",
                            "type": "String"
                        },
                        {
                            "name": "version",
                            "description": "Node.js compiled-in version",
                            "type": "String"
                        },
                        {
                            "name": "installPrefix",
                            "description": "Node.js installation directory",
                            "type": "String"
                        },
                        {
                            "name": "title",
                            "description": "The current process title (as reported in ps)",
                            "type": "String"
                        },
                        {
                            "name": "execPath",
                            "description": "The path to the current node.js executable",
                            "type": "String"
                        },
                        {
                            "name": "argv",
                            "description": "Arguments passed on the command line to this process",
                            "type": "Array(String)"
                        },
                        {
                            "name": "env",
                            "description": "Current environment (inherited)",
                            "type": "Object"
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory",
                            "type": "String"
                        },
                        {
                            "name": "uptime",
                            "description": "Number of seconds the process has been up (if available)",
                            "type": "Integer"
                        },
                        {
                            "name": "versions",
                            "description": "Versions of V8 and dependent libraries (if available)",
                            "type": "String"
                        },
                        {
                            "name": "arch",
                            "description": "Processor architecture (if available)",
                            "type": "String"
                        },
                        {
                            "name": "gid",
                            "description": "Process group ID",
                            "type": "Integer"
                        },
                        {
                            "name": "uid",
                            "description": "Process user ID",
                            "type": "Integer"
                        },
                        {
                            "name": "pid",
                            "description": "Unique process ID",
                            "type": "Integer"
                        },
                        {
                            "name": "umask",
                            "description": "The process file mode creation mask",
                            "type": "Integer"
                        },
                        {
                            "name": "memoryUsage",
                            "description": "An object describing memory usage of the node.js process",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "rss",
                                    "description": "As defined by process.memoryUsage",
                                    "type": "Integer"
                                },
                                {
                                    "name": "vsize",
                                    "description": "As defined by process.memoryUsage",
                                    "type": "Integer"
                                },
                                {
                                    "name": "heapTotal",
                                    "description": "As defined by process.memoryUsage",
                                    "type": "Integer"
                                },
                                {
                                    "name": "heapUsed",
                                    "description": "As defined by process.memoryUsage",
                                    "type": "Integer"
                                }
                            ]
                        },
                        {
                            "name": "os",
                            "description": "An object containing O/S information",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "hostname",
                                    "description": "Name of the host operating system",
                                    "type": "String"
                                },
                                {
                                    "name": "type",
                                    "description": "Operating system type",
                                    "type": "String"
                                },
                                {
                                    "name": "release",
                                    "description": "O/S Release version",
                                    "type": "String"
                                },
                                {
                                    "name": "uptime",
                                    "description": "O/S Uptime in seconds",
                                    "type": "String"
                                },
                                {
                                    "name": "loadavg",
                                    "description": "An array containing the 1, 5, and 15 minute load averages",
                                    "type": "Array(Number)"
                                },
                                {
                                    "name": "freemem",
                                    "description": "Free O/S memory (in bytes)",
                                    "type": "Integer"
                                },
                                {
                                    "name": "totalmem",
                                    "description": "Total O/S memory capacity (in bytes)",
                                    "type": "Integer"
                                },
                                {
                                    "name": "cpus",
                                    "description": "An array of objects containing information about each CPU/core installed",
                                    "type": "Array(Object)"
                                }
                            ]
                        }
                    ]
                }
            ]
        },
        "ReplProbe": {
            "name": "ReplProbe",
            "shortname": "ReplProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/ReplProbe.js",
            "line": 21,
            "description": "A probe based Read-Execute-Print-Loop console for node.js processes",
            "extends": "Probe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "Probe initialization parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "uniqueInstance",
                            "description": "- Usually specified to obtain a unique REPL probe instance"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "Monitor data model elements",
                    "type": "Object",
                    "props": [
                        {
                            "name": "output",
                            "description": "Last (current) REPL output line",
                            "type": "String"
                        },
                        {
                            "name": "sequence",
                            "description": "Increasing sequence number - to enforce unique line output",
                            "type": "Integer"
                        }
                    ]
                }
            ]
        },
        "StatProbe": {
            "name": "StatProbe",
            "shortname": "StatProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/StatProbe.js",
            "line": 16,
            "description": "Remote application statistics monitoring\n\nThis probe forwards application statistics to the monitor.",
            "extends": "StreamProbe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "Probe initialization parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "pattern",
                            "description": "Stat name pattern to monitor (see <a href=\"Stat.html\">Stat</a>)",
                            "type": "String",
                            "optional": true,
                            "optdefault": "*"
                        },
                        {
                            "name": "interval",
                            "description": "Queue interval (see <a href=\"StreamProbe.html\">StreamProbe</a>)",
                            "type": "Numeric",
                            "optional": true,
                            "optdefault": "1000"
                        }
                    ]
                },
                {
                    "name": "model",
                    "description": "Monitor data model elements",
                    "type": "Object",
                    "props": [
                        {
                            "name": "bundle",
                            "description": "Array of Stat elements.",
                            "type": "Stat array",
                            "props": [
                                {
                                    "name": "timestamp",
                                    "description": "Timestamp of the stat entry",
                                    "type": "String"
                                },
                                {
                                    "name": "module",
                                    "description": "Stat module",
                                    "type": "String"
                                },
                                {
                                    "name": "name",
                                    "description": "Stat name",
                                    "type": "String"
                                },
                                {
                                    "name": "value",
                                    "description": "Stat value",
                                    "type": "Numeric"
                                },
                                {
                                    "name": "type",
                                    "description": "'c'ounter, 'g'ague, or 'ms'timer",
                                    "type": "String"
                                }
                            ]
                        },
                        {
                            "name": "sequence",
                            "description": "A numeric incrementer causing a change event",
                            "type": "Integer"
                        }
                    ]
                }
            ]
        },
        "StreamProbe": {
            "name": "StreamProbe",
            "shortname": "StreamProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/StreamProbe.js",
            "line": 15,
            "description": "Base class for probes that stream data\n\nOffering real time data streaming can result in degraded performance due\nto the I/O overhead of sending individual stream elements to remote monitors.\n\nThis class eases that overhead by bundling stream elements, and sending those\nbundles in scheduled intervals.  The monitor gets to decide the interval based\non the stream volume, and their needs.\n\nDerived classes output their stream data as elements of the ```bundle```\nattribute.\n\nA ```sequence``` attribute is incremented sequentially to assure change\nevents are fired, and to allow clients to insure stream ordering and\ncompleteness.",
            "extends": "Probe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "initParams",
                    "description": "Probe initialization parameters",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "interval",
                            "description": "Number of milliseconds\n        to wait between bundles.",
                            "type": "Numeric",
                            "optional": true,
                            "optdefault": "1000"
                        }
                    ]
                }
            ]
        },
        "SyncProbe": {
            "name": "SyncProbe",
            "shortname": "SyncProbe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "file": "lib/probes/SyncProbe.js",
            "line": 11,
            "description": "Probe for exposing backbone data models from server-side persistence\n\nThis probe is used by the client-side <a href=\"Sync.html\">Sync</a> class\nto connect a local backbone model with server-side storage.\n\nIt delegates to a specialized SyncProbe defined by the server for the\nspecific data class.  For example, the server may determine that one class\ntype uses FileSyncProbe, and another class uses a different persistence\nmechanism.\n\nFor security purposes, the server must <a href=\"SyncProbe.html#property_Config\">configure</a> specific SyncProbes for\nclasses, or a default sync probe before this will operate.",
            "extends": "Probe",
            "is_constructor": 1,
            "params": [
                {
                    "name": "className",
                    "description": "Name of the class to synchronize with",
                    "type": "String"
                },
                {
                    "name": "modelId",
                    "description": "Id of the data model for live synchronization\n  If not set, a non-live probe is set up for control access only.",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "model",
                    "description": "If this is a liveSync probe, this contains\n  the attributes of the current model object.",
                    "type": "Object",
                    "optional": true
                }
            ]
        },
        "Connection": {
            "name": "Connection",
            "shortname": "Connection",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Connection.js",
            "line": 25,
            "description": "Connection with a remote process\n\nInstances of this class represent a connection with a remote monitor\nprocess.  The remote process is a peer of this process - it may produce\nand/or consume probe information.\n\nThis is an internal class created when a connection to a server is\nrequested from a monitor, or when an external connection is made from\na <a href=\"Server.html\">Server</a> instance.",
            "extends": "Backbone.Model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "- Initial data model.  Can be a JS object or another Model.",
                    "props": [
                        {
                            "name": "hostName",
                            "description": "The host name to connect with. Used if url isn't present.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "hostPort",
                            "description": "The host port to connect using. Used if url isn't present.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "url",
                            "description": "The URL used to connect. Built if hostName is supplied.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "socket",
                            "description": "Use this pre-connected socket instead of creating a new one.",
                            "type": "Io.socket",
                            "optional": true
                        },
                        {
                            "name": "gateway",
                            "description": "Allow this connection to use me as a gateway?  See <code><a href=\"Router.html#method_setGateway\">Router.setGateway()</a></code>",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "firewall",
                            "description": "Firewall inbound probe requests on this connection?",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "remoteHostName",
                            "description": "Host name given by the remote server.",
                            "type": "String READONLY",
                            "optional": true
                        },
                        {
                            "name": "remoteAppName",
                            "description": "App name given by the remote server.",
                            "type": "String READONLY",
                            "optional": true
                        },
                        {
                            "name": "remoteAppInstance",
                            "description": "The remote application instance ID running on the host.",
                            "type": "Integer READONLY",
                            "optional": true
                        },
                        {
                            "name": "remotePID",
                            "description": "Remote process ID.",
                            "type": "String READONLY",
                            "optional": true
                        },
                        {
                            "name": "remoteProbeClasses",
                            "description": "Array of probe classes available to the remote server.",
                            "type": "Array of String READONLY",
                            "optional": true
                        },
                        {
                            "name": "remoteGateway",
                            "description": "Can the remote process act as a gateway?",
                            "type": "Boolean READONLY",
                            "optional": true
                        },
                        {
                            "name": "remoteFirewall",
                            "description": "Is the remote side firewalled from inbound probe requests?",
                            "type": "Boolean READONLY",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Log": {
            "name": "Log",
            "shortname": "Log",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Log.js",
            "line": 17,
            "description": "A lightweight component for gathering and emitting application logs\n\nIt's designed with low development and runtime cost in mind, encouraging\nusage with minimum concern for overhead.  Runtime monitoring can be as chatty\nas desired, outputting every log statement of every type, or finely tuned\nwith regular expressions to monitor specific log statements.\n\nLog Collector\n-------------\n\nAs a collector, it's a place to send application logs.\n\nExample for outputting a log in your application:\n\n    var log = require('monitor').getLogger('myModule');\n    ...\n    log.info('Credit limit accepted', limit, requestedAmount);\n\nThe above is a request to output an ```info``` log for ```myModule``` named\n```Credit limit accepted```.  The log entry includes all additional parameters,\nin this case the customer credit limit and the reqeusted amount.\n\nThe full name for this log entry is: ```\"info.myModule.Credit limit accepted\"```\nThe name is important, as monitors can be configured to output logs based\non this name.\n\nBest practices are to include dynamic parameters in extra arguments\nvs. concatenating strings.  This reduces logging overhead, especially\nfor log statements that aren't currently being watched.\n\nLog Emitter\n-----------\nAs an emitter, the Log module is a place to capture logging output.\n\nWhen listening for log entries, wildcards can be used to register for\nparticular log types and entries.\n\n    var Log = require('monitor').Log;\n    ...\n    Log.on('info.myModule.*', myFunction);\n\nWill call ```myFunction``` when all ```info.myModule.*``` logs are emitted.\n\nListeners are invoked with the following arguments:\n\n- type - The log type (trace, debug, info, warn, error, or fatal)\n- module - The logger module name\n- name - The log entry name\n- args... - Additional arguments passed into the log entry are passed on\n            as additional args to the event listener.\n\nWildcards\n---------\nA flexible and user-oriented wildcard pattern is used for monitoring\nlogs.  The pattern is described in the <a href=\"Stat.html#wildcards\">Wildcard secttion of the Stats class</a>.\n\nChoosing Good Names\n-------------------\nIt's a good idea to pick a good naming scheme with each dot-delimited segment\nhaving a consistent, well-defined purpose.  Volatile segments should be as deep\ninto the hierarchy (furthest right) as possible.  Keeping the names less\nvolatile makes it easier to turn statistics recording on for all logs.",
            "is_constructor": 1
        },
        "Monitor": {
            "name": "Monitor",
            "shortname": "Monitor",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Monitor.js",
            "line": 17,
            "description": "Monitor a remote probe\n\nMonitor objects are the local interface to a remote <a href=\"Probe.html\">Probe</a>.\nThe probe may be running in this process or on a remote server.\n\nIn a disconnected state, the monitor object contains information about\nthe type, attributes, and location of the probe it will monitor.\n\nIn a connected state, the monitor object contains the data attributes of\nthe probe it is monitoring, and emits change events as the probe changes\nstate.\n\nMany monitors may be attached to a single probe.  When the probe data model\nchanges, changes are broadcast to the connected monitors.\n\nProbes can be remotely controlled using the control() method.\nThe control() method acts an RPC in that it accepts input arguments and\nreturns results to the monitor initiating the request.\n\nExample:\n\n    // Connecting a monitor to a probe\n    var processMonitor = new Monitor({\n      probeClass: 'Process'\n    });\n    processMonitor.connect();\n\n    // Monitoring the probe\n    processMonitor.on('change', function(){\n      console.log('Changes:', processMonitor.getChangedAttributes());\n    });\n\n    // Remote control\n    processMonitor.control('ping', function(error, response) {\n      console.log('Ping response: ', response);\n    });\n\nMonitoring a probe on a remote server requires the ```hostName``` parameter\nto be set.\n\n    // Connecting to a remote monitor\n    var processMonitor = new Monitor({\n      probeClass: 'Process',\n      hostName: 'remote-server1'\n    });\n    processMonitor.connect();\n\nAdditional parameters can be set to identify a specific server if many\nservers are running on the specified ```hostName```.",
            "extends": "Backbone.Model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "- Initial data model.  Can be a JS object or another Model.",
                    "props": [
                        {
                            "name": "id",
                            "description": "The monitor object id.  Set externally.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "probeClass",
                            "description": "Class name of the probe this is (or will be) monitoring.",
                            "type": "String"
                        },
                        {
                            "name": "initParams",
                            "description": "Initialization parameters passed to the probe during instantiation.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "hostName",
                            "description": "Hostname the probe is (or will) run on.\n      If not set, the Router will connect with the first host capable of running this probe.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "appName",
                            "description": "Application name the probe is (or will) run within.\n      If not set, the Router will disregard the appName of the process it is connecting with.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "appInstance",
                            "description": "Application instance ID the probe is (or will) run within.\n      If not set, the Router will disregard the appInstance of the process it is connecting with.\n      Application instances can (should) set the $NODE_APP_INSTANCE environment\n      variable prior to running to uniquely identify their unique instance within a\n      server or network.  If this variable is not set prior to running the\n      app, node-monitor will assign a unique ID among other running apps on the host.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "probeId",
                            "description": "ID of the probe this is monitoring (once connected). READONLY",
                            "type": "String"
                        },
                        {
                            "name": "PROBE_PARAMS...",
                            "description": "... all other <strong>```model```</strong> parameters are READONLY parameters of the connected probe",
                            "type": "(defined by the probe)"
                        }
                    ]
                }
            ]
        },
        "Probe": {
            "name": "Probe",
            "shortname": "Probe",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Probe.js",
            "line": 13,
            "description": "A software device used to expose real time data to monitors\n\nThis is the base class from which all probe implementations extend.\n\nIn order to send probe data to monitors, probe implementations simply set\ntheir model data using ```set()```.  Those changes are detected and propagated\nto all monitors of this probe, firing their change events.\n\nIn order to allow remote probe control, probes need only provide a method\ncalled ```{name}_control()```.  See the ```ping_control()``` method as an example,\nand the ```Probe.onControl()``` method for more information.",
            "extends": "Backbone.Model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "- Initial data model.  Can be a JS object or another Model.",
                    "props": [
                        {
                            "name": "id",
                            "description": "The probe id.\n      Assigned by the <a href=\"Router.html\">Router</a> on probe instantiation.",
                            "type": "String"
                        }
                    ]
                }
            ]
        },
        "Router": {
            "name": "Router",
            "shortname": "Router",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Router.js",
            "line": 22,
            "description": "Probe location and message routing\n\nThe router is a class used internally to locate probes and connect\nevents so messages are correctly routed between probes and their monitors.\n\nIt is a *singleton* class, designed to run one instance within\na monitor process, and accessed via the (protected) `getRouter()`\nmethod of the <a href=\"Monitor.html\">Monitor</a> object.\n\nIt manages all outbound requests to probes, either internally or externally\nvia the <a href=\"Connection.html\">Connection</a> to the remote process.",
            "extends": "Backbone.Model",
            "is_constructor": 1
        },
        "Server": {
            "name": "Server",
            "shortname": "Server",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Server.js",
            "line": 16,
            "description": "A server for accepting inbound connections from remote monitors\n\nServers are created when a process wants to expose probe data to remote\nmonitors.  Example:\n\n    // Accept remote monitors\n    var server = new Monitor.Server();\n    server.start();\n\nAn instance of this class represents a listening server accepting inbound\nconnections.  As inbound connections are detected, a new\n<a href=\"Connection.html\">Connection</a> object is created to manage\ntraffic on that connection.\n\nSecurity:  Make sure the port range specified in Monitor.Config (starting\nat 42000) is not exposed outside your internal network.  If you desire a\ndifferent security model, create your secure server and pass it to the\nconstructor.",
            "extends": "Backbone.Model",
            "is_constructor": 1,
            "params": [
                {
                    "name": "model",
                    "description": "- Initial data model.  Can be a JS object or another Model.",
                    "props": [
                        {
                            "name": "gateway",
                            "description": "- Allow incoming monitors to use me as a gateway (default false)",
                            "type": "Boolean"
                        },
                        {
                            "name": "server",
                            "description": "- The listening node.js server.  Constructed by this class, or specified if a custom server is desired.",
                            "type": "HttpServer"
                        },
                        {
                            "name": "port",
                            "description": "- The connected port.  This is set upon start() if the server isn't specified on construction.",
                            "type": "Integer"
                        }
                    ]
                }
            ]
        },
        "Stat": {
            "name": "Stat",
            "shortname": "Stat",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Stat.js",
            "line": 16,
            "description": "A lightweight component for gathering and emitting application statistics\n\nThis is both a collector and emitter for application stats.\n\nIt's designed with low development and runtime cost in mind, encouraging\nusage with minimum concern for overhead.\n\nStat Collector\n--------------\n\nAs a collector, it's a place to send application stats as they're discovered.\n\nExample for incrementing a stat in your application:\n\n    var stat = require('monitor').getStatLogger('myModule');\n    ...\n    stat.increment('requests.inbound');\n\nThe above is a request to increment the ```myModule.requests.inbound``` stat.\nIt peforms work only if someone is listening for that event.\n\nStat Emitter\n-------------\nAs an emitter, Stat is a place to gather stats as they're collected.\n\nWhen listening for stats, wildcards can be used to register for many stats\nwithin a group. For example, the following call:\n\n    var Stat = require('monitor').Stat;\n    Stat.on('myModule.*.timer', myFunction);\n\nWill call ```myFunction``` when all ```myModule.*.timer``` stats are emitted.\n\nListeners are invoked with 4 arguments:\n\n- module - The statLogger module name\n- name - The name of the stat that just fired\n- value - The numeric value passed\n- type - An enumeration of the types of stats:<br/>\n  'c'  - Counter.  Add (or subtract) the value to (or from) the prior value<br/>\n  'g'  - Gague.  Value is to be recorded as provided<br/>\n  'ms' - Timer.  Millisecond amount of time something took.\n\n<h2 id=\"wildcards\">Wildcards</h2>\n\nThe following wildcards are allowed for registering events.  They're\nmodeled after the graphite wildcard syntax (from the\n<a href=\"https://graphite.readthedocs.org/en/latest/render_api.html#paths-and-wildcards\">graphite docs</a>):\n\n#### Delimiter\nThe period (.) character is literal, and matches name segment separators.\n\n#### Asterisk\nThe asterisk (*) matches zero or more characters. It is non-greedy, so you\ncan have more than one within a single path element.\n\nExample: servers.ix\\*ehssvc\\*v.cpu.total.\\* will return all total CPU metrics\nfor all servers matching the given name pattern.\n\nAn asterisk at the far right of the pattern matches everything to the right,\nincluding all path segments.  For example, ```servers.*``` matches all\nnames beginning with ```servers.```.\n\n#### Character list or range\nCharacters in square brackets ([...]) specify a single character position in\nthe path string, and match if the character in that position matches one of\nthe characters in the list or range.\n\nA character range is indicated by 2 characters separated by a dash (-), and\nmeans that any character between those 2 characters (inclusive) will match.\nMore than one range can be included within the square brackets, e.g. foo[a-z0-9]bar\nwill match foopbar, foo7bar etc..\n\nIf the characters cannot be read as a range, they are treated as a\nlist - any character in the list will match, e.g. foo[bc]ar will match\nfoobar and foocar. If you want to include a dash (-) in your list, put\nit at the beginning or end, so it's not interpreted as a range.\n\n#### Value list\nComma-separated values within curly braces ({foo,bar,...}) are treated as\nvalue lists, and match if any of the values matches the current point in\nthe path. For example, servers.ix01ehssvc04v.cpu.total.{user,system,iowait}\nwill match the user, system and I/O wait total CPU metrics for the specified\nserver.\n\n#### Javascript Regex\nFor finer grained expression matching, a javascript style regex can be\nspecified using the ```/.../``` syntax.  This style spans the entire identifier.\nYou can ignore case using the ```/.../i``` syntax.  If the first character of the\nstring is a slash, it considers the string a javascript regular expression.\n\nChoosing Good Names\n-------------------\nIt's a good idea to pick a good naming scheme with each dot-delimited segment\nhaving a consistent, well-defined purpose.  Volatile segments should be as deep\ninto the hierarchy (furthest right) as possible.  Keeping the names less\nvolatile makes it easier to turn recording on for all statistics.",
            "is_constructor": 1
        },
        "Sync": {
            "name": "Sync",
            "shortname": "Sync",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "lib/Sync.js",
            "line": 91,
            "description": "Live data model synchronization.\n\nThis class can be attached to Backbone models to synchronize backend data using the\n<a href=\"http://documentcloud.github.com/backbone/#Model-fetch\">```fetch```</a>,\n<a href=\"http://documentcloud.github.com/backbone/#Model-save\">```save```</a>, and\n<a href=\"http://documentcloud.github.com/backbone/#Model-destroy\">```destroy```</a>\nBackbone API methods.\n\nIt also provides two-way change based synchronization, updating data on the server as\nchanges are made to the model, and updating the client model as changes are detected\non the server.\n\nCommunication is <a href=\"Probe.html\">Probe</a> based, leveraging the built-in\nconnection, routing, and socket-io functionality.  The <a href=\"FileSync.html\">FileSync</a>\nprobe is provided for file-based model persistence, and others can be written to\nimplement alternate persistence mechanisms.",
            "access": "private",
            "tagname": ""
        },
        "ConnectionTest": {
            "name": "ConnectionTest",
            "shortname": "ConnectionTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/ConnectionTest.js",
            "line": 12,
            "description": "Unit tests for the <a href=\"Connection.html\">Connection</a> class."
        },
        "FileProbeTest": {
            "name": "FileProbeTest",
            "shortname": "FileProbeTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/FileProbeTest.js",
            "line": 32,
            "description": "Unit tests for the <a href=\"FileProbe.html\">File</a> probe."
        },
        "InspectTest": {
            "name": "InspectTest",
            "shortname": "InspectTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/InspectTest.js",
            "line": 12,
            "description": "Unit tests for the <a href=\"Inspect.html\">Inspect</a> probe."
        },
        "LogTest": {
            "name": "LogTest",
            "shortname": "LogTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/LogTest.js",
            "line": 13,
            "description": "Unit tests for the <a href=\"Log.html\">Log</a> class."
        },
        "MonitorTest": {
            "name": "MonitorTest",
            "shortname": "MonitorTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/MonitorTest.js",
            "line": 7,
            "description": "Unit tests for the <a href=\"Monitor.html\">Monitor</a> class."
        },
        "ProbeTest": {
            "name": "ProbeTest",
            "shortname": "ProbeTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/ProbeTest.js",
            "line": 12,
            "description": "Unit tests for the <a href=\"Probe.html\">Probe</a> class."
        },
        "RouterTest": {
            "name": "RouterTest",
            "shortname": "RouterTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/RouterTest.js",
            "line": 14,
            "description": "Unit tests for the <a href=\"Router.html\">Router</a> class."
        },
        "ServerTest": {
            "name": "ServerTest",
            "shortname": "ServerTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/ServerTest.js",
            "line": 11,
            "description": "Unit tests for the <a href=\"Server.html\">Server</a> class."
        },
        "StatTest": {
            "name": "StatTest",
            "shortname": "StatTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/StatTest.js",
            "line": 12,
            "description": "Unit tests for the <a href=\"Stat.html\">Stat</a> class."
        },
        "SyncProbeTest": {
            "name": "SyncProbeTest",
            "shortname": "SyncProbeTest",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Monitor",
            "namespace": "",
            "file": "test/SyncProbeTest.js",
            "line": 41,
            "description": "Unit tests for the <a href=\"SyncProbe.html\">SyncProbe</a> probe."
        }
    },
    "classitems": [
        {
            "file": "lib/probes/FileProbe.js",
            "line": 129,
            "description": "Build a backwards compatible file change watcher\n\nThe Node.js\n<a href=\"http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener\">```fs.watch```</a>\nfunctionality was introduced in version 0.6.x.  This method builds a watcher\nobject that uses the new funcitonality, and degrades to the polling style\n``fs.watchFile`` functionality if running with node.js that doesn't have\n```fs.watch```.\n\nThe provided callback is only fired if the file has changed.\n\nWhen done watching, make sure to call the ```close()``` method of the\nreturned object to release resources consumed by file watching.",
            "static": 1,
            "itemtype": "method",
            "name": "watch",
            "params": [
                {
                    "name": "path",
                    "description": "Path to the file",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "File watch options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "persistent",
                            "description": "File encoding type.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "pollStyle",
                            "description": "Use the older polling-style watchFile.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "interval",
                            "description": "Polling interval (if pollStyle=true)",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "10"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function called on file change.",
                    "type": "Function (event)"
                },
                {
                    "name": "callabck.event",
                    "description": "One of 'change' or 'rename' (delete = 'rename')",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An object that contains a ```close()``` method to call when\n    done watching.",
                "type": "Object"
            },
            "class": "FileProbe"
        },
        {
            "file": "lib/probes/FileProbe.js",
            "line": 206,
            "description": "Watch a file for changes and reload the content on change\n\nThis method accepts a callback function that is invoked whenever the file\ncontents have changed.  If preload is requested, the callback is also called\non the initial file contents.\n\n    // Monitor the homePage.html template\n    var FileProbe = Monitor.FileProbe;\n    var path = __dirname + \"/templates/homePage.html\";\n    var options = {preload:true};\n    var homePageWatcher = FileProbe.watchLoad(path, options, function(error, content) {\n      console.log(\"Home page template: \" + content)\n    });\n\nThis uses the Node.js\n<a href=\"http://nodejs.org/api/all.html#all_fs_watch_filename_options_listener\">```fs.watch```</a>\nfunctionality if available, or the older polling mechanism if running on\na pre-0.6.x version of Node.js.\n\nWhen done watching, call the ```close()``` method of the returned watcher\nobject.  This releases all resources associated with file watching.\n\n    // Stop watching the homePage template\n    homePageWatcher.close();",
            "static": 1,
            "itemtype": "method",
            "name": "watchLoad",
            "params": [
                {
                    "name": "path",
                    "description": "Path to the file",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "File watch options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "encoding='utf8'",
                            "description": "File encoding type.",
                            "type": "String"
                        },
                        {
                            "name": "preload=false",
                            "description": "Preload the contents, calling the callback when preloaded.",
                            "type": "Boolean"
                        },
                        {
                            "name": "persistent=false",
                            "description": "Persistent file watching?",
                            "type": "Boolean"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function called on file change (or error), and on preload if requested.",
                    "type": "Function (error, content)"
                }
            ],
            "return": {
                "description": "An object that contains a ```close()``` method to call when\n    done watching.",
                "type": "Object"
            },
            "class": "FileProbe"
        },
        {
            "file": "lib/probes/FileProbe.js",
            "line": 274,
            "description": "Tail a file",
            "static": 1,
            "itemtype": "method",
            "name": "tail",
            "params": [
                {
                    "name": "path",
                    "description": "Path to the file",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "File watch options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "encoding=UTF8",
                            "description": "File encoding type.",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Function called on change",
                    "type": "Function (content)"
                }
            ],
            "return": {
                "description": "An object that contains a ```close()``` method to call when\n    done tailing.",
                "type": "Object"
            },
            "class": "FileProbe"
        },
        {
            "file": "lib/probes/FileProbe.js",
            "line": 291,
            "description": "Create a directory recursively\n\nThis makes a directory and all nodes above it that need creating.",
            "static": 1,
            "itemtype": "method",
            "name": "mkdir_r",
            "params": [
                {
                    "name": "dirname",
                    "description": "Full directory path to be made",
                    "type": "String"
                },
                {
                    "name": "mode",
                    "description": "Directory creation mode (see fs.mkdir)",
                    "type": "Object",
                    "optional": true,
                    "optdefault": "0777"
                },
                {
                    "name": "callback",
                    "description": "Called when complete, with possible error.",
                    "type": "Function(error)",
                    "optional": true
                }
            ],
            "class": "FileProbe"
        },
        {
            "file": "lib/probes/FileProbe.js",
            "line": 335,
            "description": "Remove a file or directory recursively\n\nThis is equivalent to shell rm -rf {filepath or dirpath}.",
            "static": 1,
            "itemtype": "method",
            "name": "rm_rf",
            "params": [
                {
                    "name": "path",
                    "description": "Path to a directory or file to remove",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Function to call when done, with possible error.",
                    "type": "Function(error)"
                }
            ],
            "class": "FileProbe"
        },
        {
            "file": "lib/probes/FileProbe.js",
            "line": 394,
            "description": "Set the server root path for the file probe\n\nFor security purposes, this must be set server-side before the File probe\nwill operate.  It will not accept any changes once set.",
            "static": 1,
            "itemtype": "method",
            "name": "setRootPath",
            "params": [
                {
                    "name": "rootPath",
                    "description": "A path to the root directory for the FilePath probe",
                    "type": "String"
                }
            ],
            "class": "FileProbe"
        },
        {
            "file": "lib/probes/FileProbe.js",
            "line": 412,
            "description": "Get the current root path.\n\nAs a static method, this is only available on the server running the probe.\nFor security purposes, this is not exposed in the FileProbe data model.",
            "static": 1,
            "itemtype": "method",
            "name": "getRootPath",
            "return": {
                "description": "The path to the root directory for the FilePath probe",
                "type": "String"
            },
            "class": "FileProbe"
        },
        {
            "file": "lib/probes/FileSyncProbe.js",
            "line": 262,
            "description": "Get the full path to the file\n\nThis builds the full pathname to the file, and performs an fs.sync()\non that pathname, providing the pathname and sync object in the callback.",
            "itemtype": "method",
            "name": "getFullPath",
            "params": [
                {
                    "name": "modelId",
                    "description": "ID of the data model to sync",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(error, return)",
                    "props": [
                        {
                            "name": "error",
                            "description": "Error object (null if no error)",
                            "type": "Object"
                        },
                        {
                            "name": "return",
                            "description": "return object",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "path",
                                    "description": "Full pathname to the file",
                                    "type": "String"
                                },
                                {
                                    "name": "stat",
                                    "description": "Stats object (null if the file doesn't esixt)",
                                    "type": "Fs.stats"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "FileSyncProbe"
        },
        {
            "file": "lib/probes/FileSyncProbe.js",
            "line": 316,
            "description": "Set the server root path for objects stored with this probe\n\nFor security purposes, this must be set before the SyncFileProbe\nwill operate.  It will not accept any changes once set.",
            "static": 1,
            "itemtype": "method",
            "name": "setRootPath",
            "params": [
                {
                    "name": "rootPath",
                    "description": "A path to the root directory for model object storage",
                    "type": "String"
                }
            ],
            "class": "FileSyncProbe"
        },
        {
            "file": "lib/probes/FileSyncProbe.js",
            "line": 334,
            "description": "Get the current root path.\n\nAs a static method, this is only available on the server running the probe.\nFor security purposes, this is not exposed in the FileSyncProbe data model.",
            "static": 1,
            "itemtype": "method",
            "name": "getRootPath",
            "return": {
                "description": "The path to the root directory for the FilePath probe",
                "type": "String"
            },
            "class": "FileSyncProbe"
        },
        {
            "file": "lib/probes/InspectProbe.js",
            "line": 102,
            "description": "Evaluate an expression, returning the depth-limited results",
            "itemtype": "method",
            "name": "eval_control",
            "params": [
                {
                    "name": "expression",
                    "description": "Expression to evaluate",
                    "type": "String"
                },
                {
                    "name": "depth",
                    "description": "Depth of the object to return",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "value  Returns the depth-limited value",
                "type": "Mixed"
            },
            "class": "InspectProbe"
        },
        {
            "file": "lib/probes/InspectProbe.js",
            "line": 123,
            "description": "Evaluate an expression, returning the raw results",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "_evaluate",
            "params": [
                {
                    "name": "expression",
                    "description": "Expression to evaluate",
                    "type": "String"
                }
            ],
            "return": {
                "description": "value  Returns the expression value",
                "type": "Mixed"
            },
            "class": "InspectProbe"
        },
        {
            "file": "lib/probes/InspectProbe.js",
            "line": 146,
            "description": "Poll for changes in the evaluation",
            "itemtype": "method",
            "name": "poll",
            "class": "InspectProbe"
        },
        {
            "file": "lib/probes/ProcessProbe.js",
            "line": 71,
            "description": "Poll the probe for changes\n\nThis method is called by the parent <a href=\"PollingProbe.html\">PollingProbe</a> on the interval specified by the client <a href=\"Monitor.html\">Monitor</a>.\n\nIt polls for process information, and updates the data model with any changes.",
            "itemtype": "method",
            "name": "poll",
            "class": "ProcessProbe"
        },
        {
            "file": "lib/probes/ReplProbe.js",
            "line": 66,
            "description": "Send output to the terminal\n\nThis forces the change event even if the last output is the same\nas this output.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "output",
            "params": [
                {
                    "name": "str",
                    "description": "String to output to the repl console",
                    "type": "String"
                }
            ],
            "class": "ReplProbe"
        },
        {
            "file": "lib/probes/ReplProbe.js",
            "line": 84,
            "description": "Release any resources consumed by this probe.\n\nStop the REPL console.  Consoles live 1-1 with a UI counterpart, so stop\nrequests exit the underlying repl console.  If the probe is re-started it\nwill get a new repl stream and console.",
            "itemtype": "method",
            "name": "release",
            "class": "ReplProbe"
        },
        {
            "file": "lib/probes/ReplProbe.js",
            "line": 99,
            "description": "Process an autocomplete request from the client",
            "itemtype": "method",
            "name": "autocomplete",
            "params": [
                {
                    "name": "params",
                    "description": "Named parameters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, returnParams)"
                }
            ],
            "class": "ReplProbe"
        },
        {
            "file": "lib/probes/ReplProbe.js",
            "line": 121,
            "description": "Handle user input from the console line",
            "itemtype": "method",
            "name": "input",
            "params": [
                {
                    "name": "params",
                    "description": "Named parameters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, returnParams)"
                }
            ],
            "class": "ReplProbe"
        },
        {
            "file": "lib/probes/ReplProbe.js",
            "line": 141,
            "description": "Execute a shell command",
            "itemtype": "method",
            "name": "sh",
            "params": [
                {
                    "name": "params",
                    "description": "Named parameters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, returnParams)"
                }
            ],
            "class": "ReplProbe"
        },
        {
            "file": "lib/probes/ReplProbe.js",
            "line": 153,
            "description": "Run a shell command and emit the output to the browser.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_runShellCmd",
            "params": [
                {
                    "name": "command",
                    "description": "- The shell command to invoke",
                    "type": "String"
                }
            ],
            "class": "ReplProbe"
        },
        {
            "file": "lib/probes/StreamProbe.js",
            "line": 63,
            "description": "Queue an item in the stream\n\nThis method places the item into the stream and outputs it to the\nmonitor, or queues it up for the next bundle.",
            "itemtype": "method",
            "name": "queueItem",
            "params": [
                {
                    "name": "item",
                    "description": "Item to place into the queue",
                    "type": "Any"
                }
            ],
            "class": "StreamProbe"
        },
        {
            "file": "lib/probes/StreamProbe.js",
            "line": 95,
            "description": "Send the bundle to the montitor",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_send",
            "class": "StreamProbe"
        },
        {
            "file": "lib/probes/SyncProbe.js",
            "line": 67,
            "description": "Create and save a new instance of the class into storage\n\nThis probe control requests a new instance of a data model to be\npersisted onto storage.  It is invoked when a data model that has\nthe Sync probe attached calls ```save()``` on a new object.",
            "itemtype": "method",
            "name": "create_control",
            "params": [
                {
                    "name": "model",
                    "description": "Full data model to save.  This must contain\n    the id element.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback when complete",
                    "type": "Function(error, result)",
                    "props": [
                        {
                            "name": "error",
                            "description": "Set if an error occurs during creation.",
                            "type": "Mixed"
                        },
                        {
                            "name": "result",
                            "description": "An object containing any differing\n        parameters from the model sent in.  Normally a blank object.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "SyncProbe"
        },
        {
            "file": "lib/probes/SyncProbe.js",
            "line": 86,
            "description": "Read an instance from storage\n\nThis probe control reads the instance with the specified id\nfrom storage, and returns it in the callback.",
            "itemtype": "method",
            "name": "read_control",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the object to read",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback when complete",
                    "type": "Function(error, result)",
                    "props": [
                        {
                            "name": "error",
                            "description": "Set if an error occurs during read.\n      if error.code === 'NOTFOUND' then the requested object wasn't found.\n      if error.code === 'PARSE' then the document was poorly formatted JSON.",
                            "type": "Mixed"
                        },
                        {
                            "name": "result",
                            "description": "The full object.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "SyncProbe"
        },
        {
            "file": "lib/probes/SyncProbe.js",
            "line": 104,
            "description": "Update a data model in storage\n\nThis acts like a REST PUT, meaning it can create a new object, or\nupdate an existing object.\n\nBackbone has only a save() method.  If the client sets the ID\nof the object before save(), Backbone thinks the object exists and\nwill call update vs. create.",
            "itemtype": "method",
            "name": "update_control",
            "params": [
                {
                    "name": "model",
                    "description": "Full data model to save.  This must contain\n    the id element.",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback when complete",
                    "type": "Function(error, result)",
                    "props": [
                        {
                            "name": "error",
                            "description": "Set if an error occurs during save.",
                            "type": "Mixed"
                        },
                        {
                            "name": "result",
                            "description": "An object containing any differing\n        parameters from the model sent in.  Normally a blank object.",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "SyncProbe"
        },
        {
            "file": "lib/probes/SyncProbe.js",
            "line": 126,
            "description": "Delete an instance from storage\n\nThis probe control deletes the instance with the specified id\nfrom storage.",
            "itemtype": "method",
            "name": "delete_control",
            "params": [
                {
                    "name": "id",
                    "description": "ID of the object to read",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback when complete",
                    "type": "Function(error)",
                    "props": [
                        {
                            "name": "error",
                            "description": "Set if an error occurs during read.",
                            "type": "Mixed"
                        }
                    ]
                }
            ],
            "class": "SyncProbe"
        },
        {
            "file": "lib/probes/SyncProbe.js",
            "line": 143,
            "description": "Static Configurations\n\nThese can be set onto the Monitor.SyncProbe class after it's loaded.\n\nThe SyncProbe will *not* work until the defaultProbe is defined.\n\nExample:\n\n    var syncConfig = Monitor.SyncProbe.Config;\n    syncConfig.defaultProbe = 'FileSyncProbe';\n    syncConfig.classMap = {\n      Book: 'MongoDbSync',\n      Author: 'MongoDbSync'\n    }",
            "static": 1,
            "itemtype": "property",
            "name": "Config",
            "type": "&lt;Object&gt;\n<ul>\n  <li><code>defaultProbe (String)</code> Name of the sync probe to use if the class isn't listed in the classMap</li>\n  <li><code>classMap (Object)</code> Map of className to sync probe name to use instead of the default for that class</li>\n</ul>",
            "class": "SyncProbe"
        },
        {
            "file": "lib/Connection.js",
            "line": 55,
            "description": "Connected to remote monitor process\n\nThis event is emitted after the two sides of the connection have exchanged\ninformation about themselves.",
            "itemtype": "event",
            "name": "connect",
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 129,
            "description": "Ping a remote connection",
            "itemtype": "method",
            "name": "ping",
            "params": [
                {
                    "name": "callback",
                    "description": "Callback when response is returned",
                    "type": "Function(error)"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 146,
            "description": "Disconnect from the remote process\n\nThis can be called from the underlying transport if it detects a disconnect,\nor it can be manually called to force a disconnect.",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "reason",
                    "description": "Reason for the disconnect",
                    "type": "String"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 155,
            "description": "<strong>Disconnected from a remote monitor process</strong>\n\nThis event is emitted after the remote connection is disconnected and\nresources released.",
            "itemtype": "event",
            "name": "disconnect",
            "params": [
                {
                    "name": "reason",
                    "description": "Reason for the disconnect",
                    "type": "String"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 180,
            "description": "Is this connection with the specified host?",
            "itemtype": "method",
            "name": "isThisHost",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "hostName",
                    "description": "The host name to check",
                    "type": "String"
                }
            ],
            "return": {
                "description": "withHost  True if the connection is with this host",
                "type": "Boolean"
            },
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 196,
            "description": "Emit the specified message to the socket.\n\nThe other side of the connection can handle and respond to the message\nusing the 'on' method.",
            "itemtype": "method",
            "name": "emit",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "name",
                    "description": "The message name to send",
                    "type": "String"
                },
                {
                    "name": "args...",
                    "description": "Variable number of arguments to send with the message",
                    "type": "Mixed"
                },
                {
                    "name": "callback",
                    "description": "Called when remote sends a reply",
                    "type": "Function"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 214,
            "description": "Bind the specified handler to the remote socket message.\n\nOnly a single handler (per message name) can be bound using this method.",
            "itemtype": "method",
            "name": "addEvent",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "eventName",
                    "description": "The event name to handle",
                    "type": "String"
                },
                {
                    "name": "handler",
                    "description": "Called when the message is received.\n<ul>\n  <li>args... {Mixed} Arguments sent in by the remote client</li>\n  <li>callback {Function} Final arg if the client specified a callback</li>\n</ul>",
                    "type": "Function (args..., callback)"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 259,
            "description": "An error has occurred on the connection\n\nThis event is triggered when an error occurs on the connection.  Errors\nmay occur when network is unstable, and can be an indication of impending\ndisconnection.",
            "itemtype": "event",
            "name": "error",
            "params": [
                {
                    "name": "err",
                    "description": "Reason for the error (from underlying transport)",
                    "type": "Object"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 328,
            "description": "Process an inbound request to connect with a probe\n\nThis will fail if this connection was created as a firewall.",
            "itemtype": "method",
            "name": "probeConnect",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "monitorJSON",
                    "description": "Probe connection parameters, including:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "probeClass",
                            "description": "The probe class",
                            "type": "String"
                        },
                        {
                            "name": "initParams",
                            "description": "Probe initialization parameters",
                            "type": "Object"
                        },
                        {
                            "name": "hostName",
                            "description": "Connect with this host (if called as a gateway)",
                            "type": "String"
                        },
                        {
                            "name": "appName",
                            "description": "Connect with this app (if called as a gateway)",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, probeJSON)"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 423,
            "description": "Process an inbound request to disconnect with a probe",
            "itemtype": "method",
            "name": "probeDisconnect",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "Disconnect parameters, including:\n  probeId {String} The unique probe id",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error)"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 479,
            "description": "Process an inbound control request to a probe",
            "itemtype": "method",
            "name": "probeControl",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "params",
                    "description": "Control parameters, including:\n  probeId {String} The unique probe id\n  name {String} The control message name\n  params {Object} Any control message parameters",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, returnParams)"
                }
            ],
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Connection.js",
            "line": 544,
            "description": "Constructor for a list of Connection objects\n\n    var myList = new Connection.List(initialElements);",
            "static": 1,
            "itemtype": "method",
            "name": "List",
            "params": [
                {
                    "name": "items",
                    "description": "Initial list items.  These can be raw JS objects or Connection data model objects.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Collection of Connection data model objects",
                "type": "Backbone.Collection"
            },
            "class": "Connection",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 94,
            "description": "Output a ```trace``` log entry",
            "itemtype": "method",
            "name": "trace",
            "params": [
                {
                    "name": "name",
                    "description": "Log entry name",
                    "type": "String"
                },
                {
                    "name": "...",
                    "description": "Subsequent arguments to add to the log",
                    "type": "Any",
                    "optional": true
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 102,
            "description": "Output a ```debug``` log entry",
            "itemtype": "method",
            "name": "debug",
            "params": [
                {
                    "name": "name",
                    "description": "Log entry name",
                    "type": "String"
                },
                {
                    "name": "...",
                    "description": "Subsequent arguments to add to the log",
                    "type": "Any",
                    "optional": true
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 110,
            "description": "Output a ```info``` log entry",
            "itemtype": "method",
            "name": "info",
            "params": [
                {
                    "name": "name",
                    "description": "Log entry name",
                    "type": "String"
                },
                {
                    "name": "...",
                    "description": "Subsequent arguments to add to the log",
                    "type": "Any",
                    "optional": true
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 118,
            "description": "Output a ```warn``` log entry",
            "itemtype": "method",
            "name": "warn",
            "params": [
                {
                    "name": "name",
                    "description": "Log entry name",
                    "type": "String"
                },
                {
                    "name": "...",
                    "description": "Subsequent arguments to add to the log",
                    "type": "Any",
                    "optional": true
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 126,
            "description": "Output a ```error``` log entry",
            "itemtype": "method",
            "name": "error",
            "params": [
                {
                    "name": "name",
                    "description": "Log entry name",
                    "type": "String"
                },
                {
                    "name": "...",
                    "description": "Subsequent arguments to add to the log",
                    "type": "Any",
                    "optional": true
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 134,
            "description": "Output a ```fatal``` log entry",
            "itemtype": "method",
            "name": "fatal",
            "params": [
                {
                    "name": "name",
                    "description": "Log entry name",
                    "type": "String"
                },
                {
                    "name": "...",
                    "description": "Subsequent arguments to add to the log",
                    "type": "Any",
                    "optional": true
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 149,
            "description": "Send the log to all registered listeners",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "type",
                    "description": "The log type (trace, debug, info, etc)",
                    "type": "String"
                },
                {
                    "name": "module",
                    "description": "The log module name",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The log entry name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "Arguments to the log entry",
                    "type": "Any[]"
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Log.js",
            "line": 206,
            "description": "Output log statements to the console\n\nThis method can be used as a listener to send logs to the console.\n\nIt uses console.error() for error and fatal log types, and console.log()\nfor all other log types.\n\nExample:\n\n    var Log = Monitor.Log;\n    Log.on('*.MyModule.*', Log.console);",
            "static": 1,
            "itemtype": "method",
            "name": "consoleLogger",
            "params": [
                {
                    "name": "type",
                    "description": "The log type (trace, debug, info, etc)",
                    "type": "String"
                },
                {
                    "name": "module",
                    "description": "The log module name",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "The log entry name",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "All original, starting with the short name",
                    "type": "Any..."
                }
            ],
            "class": "Log",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 88,
            "description": "Receive real time notifications from the probe\n\nWhen the probe data model changes, all changed attributes are forwarded\nto monitors, triggering this event.\n\nAll probe attributes are available in the monitor, and the\ngetChangedAttributes() method returns the list of attributes changed\nsince the last change event.\n\n    myMonitor.on('change', function(){\n      console.log('Changes:', myMonitor.getChangedAttributes());\n    });",
            "itemtype": "event",
            "name": "change",
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 119,
            "description": "Connect the monitor to the remote probe\n\nUpon connection, the monitor data model is a proxy of the current state\nof the probe.",
            "itemtype": "method",
            "name": "connect",
            "params": [
                {
                    "name": "callback",
                    "description": "Called when the probe is connected (or error)",
                    "type": "Function(error)"
                }
            ],
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 128,
            "description": "The monitor has successfully connected with the probe",
            "itemtype": "event",
            "name": "connect",
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 160,
            "description": "Get the connection to the remote probe\n\nThis method returns the Connection object that represents the remote\nserver used for communicating with the connected probe.\n\nIf the probe is running internally or the monitor isn't currently\nconnected, this will return null.",
            "itemtype": "method",
            "name": "getConnection",
            "return": {
                "description": "connection  The connection object",
                "type": "Connection"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 177,
            "description": "Is the monitor currently connected?",
            "itemtype": "method",
            "name": "isConnected",
            "return": {
                "description": "True if the monitor is currently connected",
                "type": "Boolean"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 188,
            "description": "Disconnect from the remote probe\n\nThis should be called when the monitor is no longer needed.\nIt releases resources associated with monitoring the probe.\n\nIf this was the last object monitoring the probe, the probe will be\nstopped, releasing resources associated with running the probe.",
            "itemtype": "method",
            "name": "disconnect",
            "params": [
                {
                    "name": "callback",
                    "description": "Called when disconnected (or error)",
                    "type": "Function(error)"
                }
            ],
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 200,
            "description": "The monitor has disconnected from the probe",
            "itemtype": "event",
            "name": "disconnect",
            "params": [
                {
                    "name": "reason",
                    "description": "Reason specified for the disconnect\n<ul>Known Reasons:\n  <li>manual_disconnect - A manual call to disconnect() was made.</li>\n  <li>connect_failed - Underlying transport connection problem.</li>\n  <li>remote_disconnect - Underlying transport disconnected.</li>\n</ul>",
                    "type": "String"
                }
            ],
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 230,
            "description": "Send a control message to the probe.\n\nMonitors can use this method to send a message and receive a response\nfrom a connected probe.\n\nThe probe must implement the specified control method.  All probes are\nderived from the base <a href=\"Probe.html\">Probe</a> class, which offers\na ping control.\n\nTo send a ping message to a probe and log the results:\n\n    var myMonitor.control('ping', console.log);",
            "itemtype": "method",
            "name": "control",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the control message.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Named input parameters specific to the control message.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function to call upon return.\n<ul>\n  <li>error (Any) - An object describing an error (null if no errors)</li>\n  <li>response (Any) - Response parameters specific to the control message.</li>\n</ul>",
                    "type": "Function(error, response)",
                    "optional": true
                }
            ],
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 293,
            "description": "Produce an object without monitor attributes\n\nA Monitor object contains a union of the connection attributes required for\na Monitor, and the additional attributes defined by the probe it's monitoring.\n\nThis method produces an object containing only the probe portion of\nthose attributes.\n\nThe id attribute of the returned JSON is set to the probeId from\nthe monitor.",
            "itemtype": "method",
            "name": "toProbeJSON",
            "params": [
                {
                    "name": "options",
                    "description": "Options to pass onto the model toJSON",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The probe attributes",
                "type": "Object"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 322,
            "description": "Produce an object with the monitor only attributes.\n\nA Monitor object contains a union of the connection attributes required for\na Monitor, and the additional attributes defined by the probe it's monitoring.\n\nThis method produces an object containing only the monitor portion of\nthose attributes.",
            "itemtype": "method",
            "name": "toMonitorJSON",
            "params": [
                {
                    "name": "options",
                    "description": "Options to pass onto the model toJSON",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The monitor attributes",
                "type": "Object"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 348,
            "description": "Produce a server string representation of the hostName:appName:appInstance\n\nDepending on the presence of the appName and appInstance, this will produce\none of the following:\n\n    hostName\n    hostName:appName\n    hostName:appName:appInstance",
            "itemtype": "method",
            "name": "toServerString",
            "return": {
                "description": "A string representation of the monitor server",
                "type": "String"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 371,
            "description": "Generate a unique UUID-v4 style string\n\nThis is a cross-platform UUID implementation used to uniquely identify\nmodel instances.  It is a random number based UUID, and as such can't be\nguaranteed unique.",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "generateUniqueId",
            "return": {
                "description": "A globally unique ID",
                "type": "String"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 390,
            "description": "Generate a unique ID for a collection\n\nThis generates an ID to be used for new elements of the collection,\nassuring they don't clash with other elements in the collection.",
            "itemtype": "method",
            "name": "Monitor.generateUniqueCollectionId",
            "params": [
                {
                    "name": "collection",
                    "description": "The collection to generate an ID for",
                    "type": "Backbone.Collection"
                },
                {
                    "name": "prefix",
                    "description": "An optional prefix for the id",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "id  A unique ID with the specified prefix",
                "type": "String"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 420,
            "description": "Get the default router (an application singleton)\n\nThis instantiates a Router on first call.",
            "static": 1,
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "getRouter",
            "return": {
                "description": "The default router.",
                "type": "Router"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 450,
            "description": "Start a monitor server in this process\n\nThis is a shortand for the following:\n\n    var Monitor = require('monitor');\n    var server = new Monitor.Server();\n    server.start();\n\nIt can be chained like this:\n\n    var Monitor = require('monitor').start(),\n        log = Monitor.getLogger('my-app');\n\nFor more fine-tuned starting, see the <a href=\"Server.html\">Server</a> api.",
            "static": 1,
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "options",
                    "description": "- Server.start() options.  OPTIONAL",
                    "type": "Object",
                    "props": [
                        {
                            "name": "port",
                            "description": "- Port to attempt listening on if server isn't specified.  Default: 42000",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "- Called when the server is accepting connections.",
                    "type": "Function(error)"
                }
            ],
            "return": {
                "description": "monitor  - Returns the static Monitor class (for chaining)",
                "type": "Monitor"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 486,
            "description": "Stop a started monitor server in this process",
            "static": 1,
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "callback",
                    "description": "- Called when the server is accepting connections.",
                    "type": "Function(error)"
                }
            ],
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 503,
            "description": "Produce a server string representation of the hostName:appName:appInstance\n\nDepending on the presence of the appName and appInstance, this will produce\none of the following:\n\n    hostName\n    hostName:appName\n    hostName:appName:appInstance",
            "itemtype": "method",
            "name": "toServerString",
            "params": [
                {
                    "name": "monitorJSON",
                    "description": "[Object] JSON object containing the following"
                },
                {
                    "name": "hostName",
                    "description": "The host to monitor",
                    "type": "String"
                },
                {
                    "name": "appName",
                    "description": "The app name running on the host",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "appInstance",
                    "description": "The application instance ID running on the host",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "A string representation of the monitor server",
                "type": "String"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 531,
            "description": "Produce a depth-limited copy of the specified object\n\nFunctions are copied for visual inspection purposes - the fact that\nthey are a function, and any prototype members.  This is so a JSON.stringify\nof the result will show the functions (normally JSON.stringify doesn't output\nfunctions).\n\nThis method is mostly for debugging - for producing a human-readable stream\nrepresentation of the object.  It is an exact copy, except for elements of\ntype function.",
            "itemtype": "method",
            "name": "deepCopy",
            "params": [
                {
                    "name": "value",
                    "description": "Object or value to copy",
                    "type": "Mixed"
                },
                {
                    "name": "depth",
                    "description": "Maximum depth to return.  If the depth exceeds\n  this value, the string \"[Object]\" is returned as the value.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "4"
                }
            ],
            "return": {
                "description": "A depth-limited copy of the value",
                "type": "Mixed"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 605,
            "description": "Produce a recursion-safe JSON string.\n\nThis method recurses the specified object to a maximum specified depth\n(default 4).\n\nIt also indents sub-objects for debugging output.  The indent level can be\nspecified, or set to 0 for no indentation.\n\nThis is mostly useful in debugging when the standard JSON.stringify\nreturns an error.",
            "itemtype": "method",
            "name": "stringify",
            "params": [
                {
                    "name": "value",
                    "description": "Object or value to turn into a JSON string",
                    "type": "Mixed"
                },
                {
                    "name": "depth",
                    "description": "Maximum depth to return.  If the depth exceeds\n  this value, the string \"[Object]\" is returned as the value.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "4"
                },
                {
                    "name": "indent",
                    "description": "Indent the specified number of spaces (0=no indent)",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "2"
                }
            ],
            "return": {
                "description": "A JSON stringified value",
                "type": "String"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 633,
            "description": "Expose the stat logger class",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "setStatLoggerClass",
            "params": [
                {
                    "name": "statLoggerClass",
                    "description": "Stat logger class to expose",
                    "type": "Function"
                }
            ],
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 651,
            "description": "Expose the logger class",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "setLoggerClass",
            "params": [
                {
                    "name": "loggerClass",
                    "description": "Logger class to expose",
                    "type": "Function"
                }
            ],
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Monitor.js",
            "line": 669,
            "description": "Constructor for a list of Monitor objects\n\n    var myList = new Monitor.List(initialElements);",
            "static": 1,
            "itemtype": "method",
            "name": "List",
            "params": [
                {
                    "name": "items",
                    "description": "Initial list items.  These can be raw JS objects or Monitor data model objects.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Collection of Monitor data model objects",
                "type": "Backbone.Collection"
            },
            "class": "Monitor",
            "module": "Monitor"
        },
        {
            "file": "lib/Probe.js",
            "line": 39,
            "description": "Initialize the probe\n\nThis is called on the probe during construction.  It contains\nthe probe initialization attributes and an option to make probe\nconstruction asynchronous.\n\nProbe implementations can defer the initial response to the monitor until\nthe initial state is loaded.  This allows the callback on\n<a href=\"Monitor.html#method_connect\">```Monitor.connect()```</a>\nto have the complete initial state of the probe when called.\n\nIf the initial probe state cannot be determined in ```initialize```, it should\nset the ```options.asyncInit``` option to ```true```, and call the\n```options.callback(error)``` once the initial state is determined.\n\n    // Asynchronous initialization\n    options.asyncInit = true;\n    var callback = options.callback\n\nIf ```asyncInit``` is set to true, the ```callback``` must be called once\nthe initial state of the probe is known (or in an error condition).\n\n    // Set the initial state, and call the callback\n    this.set(...);\n    callback(null);\n\nSee the <a href=\"../files/lib_probes_FileProbe.js.html#l47\">```initialize```</a>\nmethod of the <a href=\"FileProbe.html\">FileProbe</a> probe for an example.  It defers\nreturning the probe to the monitor until the initial file contents are loaded.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "attributes",
                    "description": "Initial probe attributes sent in from the Monitor",
                    "type": "Object"
                },
                {
                    "name": "options",
                    "description": "Initialization options",
                    "type": "Object",
                    "props": [
                        {
                            "name": "asyncInit",
                            "description": "Set this to TRUE if the initial probe\n        state can't be known immediately.",
                            "type": "Boolean"
                        },
                        {
                            "name": "callback",
                            "description": "The callback to call\n        if asyncInit is set to true.  If an error is passed, the probe\n        will not be used.",
                            "type": "Function(error)"
                        }
                    ]
                }
            ],
            "class": "Probe",
            "module": "Monitor"
        },
        {
            "file": "lib/Probe.js",
            "line": 84,
            "description": "Release any resources consumed by this probe.\n\nThis can be implemented by derived classes that need to be informed when\nthey are to be shut down.\n\nProbes that listen to events should use this method to remove their\nevent listeners.",
            "itemtype": "method",
            "name": "release",
            "class": "Probe",
            "module": "Monitor"
        },
        {
            "file": "lib/Probe.js",
            "line": 100,
            "description": "Dispatch a control message to the appropriate control function.\n\nThis is called when the\n<a href=\"Monitor.html#method_control\">```control()```</a>\nmethod of a monitor is called.\nThe name determines the method name called on the probe.\n\nThe probe must implement a method with the name ```{name}_control()```,\nand that method must accept two parameters - an input params and a callback.\nThe callback must be called, passing an optional error and response object.\n\nFor example, if the probe supports a control with the name ```go```, then\nall it needs to do is implement the ```go_control()``` method with the\nproper signature.  See ```ping_control()``` for an example.",
            "itemtype": "method",
            "name": "onControl",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the control message.",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "Input parameters specific to the control message.",
                    "type": "Any",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Called to send the message (or error) response.\n<ul>\n  <li>error (Any) An object describing an error (null if no errors)</li>\n  <li>response (Any) Response parameters specific to the control message.\n</ul>",
                    "type": "Function(error, response)",
                    "optional": true
                }
            ],
            "class": "Probe",
            "module": "Monitor"
        },
        {
            "file": "lib/Probe.js",
            "line": 161,
            "description": "Respond to a ping control sent from a monitor",
            "itemtype": "method",
            "name": "ping_control",
            "params": [
                {
                    "name": "params",
                    "description": "Input parameters (not used)",
                    "type": "Object"
                },
                {
                    "name": "callback",
                    "description": "Called to send the message (or error) response.\n<ul>\n  <li>error (Any) An object describing an error</li>\n  <li>response (String) The string 'pong' is returned as the response</li>\n</ul>",
                    "type": "Function(error, response)"
                }
            ],
            "class": "Probe",
            "module": "Monitor"
        },
        {
            "file": "lib/Probe.js",
            "line": 186,
            "description": "Constructor for a list of Probe objects\n\n    var myList = new Probe.List(initialElements);",
            "static": 1,
            "itemtype": "method",
            "name": "List",
            "params": [
                {
                    "name": "items",
                    "description": "Initial list items.  These can be raw JS objects or Probe data model objects.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Collection of Probe data model objects",
                "type": "Backbone.Collection"
            },
            "class": "Probe",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 39,
            "description": "A new connection has been established",
            "itemtype": "event",
            "name": "connection:add",
            "params": [
                {
                    "name": "connection",
                    "description": "The added connection",
                    "type": "Connection"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 46,
            "description": "A connection has been terminated",
            "itemtype": "event",
            "name": "connection:remove",
            "params": [
                {
                    "name": "connection",
                    "description": "The removed connection",
                    "type": "Connection"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 66,
            "description": "Firewall new connections from inbound probe requests\n\nWhen two monitor processes connect, they become peers.  By default each\nprocess can request probe connections with the other.\n\nIf you want to connect with a remote probe, but don't want those servers\nto connect with probes in this process, call this method to firewall\nthose inbound probe requests.\n\nSetting this will change the firewall value for all *new* connections.\nAny existing connections will still accept incoming probe requests.",
            "static": 1,
            "itemtype": "method",
            "name": "setFirewall",
            "params": [
                {
                    "name": "firewall",
                    "description": "- Firewall new connections?",
                    "type": "Boolean"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 89,
            "description": "Set the default gateway server\n\nThe gateway server is used if a monitor cannot connect directly with the\nserver hosting the probe.\n\nWhen a monitor is requested to connect with a probe on a specific server,\na direct connection is attempted.  If that direct connection fails, usually\ndue to a firewall or browser restriction, the monitor will attempt the\nconnection to the probe through the gateway server.\n\nThe server specified in this method must have been started as a gateway\nlike this:\n\n    // Start a monitor server and act as a gateway\n    var server = new Monitor.Server({gateway:true});",
            "itemtype": "method",
            "name": "setGateway",
            "params": [
                {
                    "name": "options",
                    "description": "- Connection parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "hostName",
                            "description": "- Name of the gateway host",
                            "type": "String"
                        },
                        {
                            "name": "hostPort",
                            "description": "- Port number to connect with",
                            "type": "Integer"
                        },
                        {
                            "name": "url",
                            "description": "- The URL used to connect (created, or used if supplied)",
                            "type": "String"
                        },
                        {
                            "name": "socket",
                            "description": "- Pre-connected socket.io socket to the gateway server.",
                            "type": "Io.socket"
                        }
                    ]
                }
            ],
            "return": {
                "description": "connection  - The connection with the gateway server",
                "type": "Connection"
            },
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 121,
            "description": "Return a stable host name.",
            "itemtype": "method",
            "name": "getHostName",
            "access": "protected",
            "tagname": "",
            "return": {
                "description": "hostName  - The platform's host name, or an otherwise stable ID",
                "type": "String"
            },
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 138,
            "description": "Set the current host name.\n\nThis sets the host name that this router publishes to new connections.\nIt's only useful if the os hostname isn't the name you want to publish.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "setHostName",
            "params": [
                {
                    "name": "hostName",
                    "description": "- The host name to publish to new connections",
                    "type": "String"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 153,
            "description": "Add a connection to a remote Monitor process",
            "itemtype": "method",
            "name": "addConnection",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "options",
                    "description": "- Connection parameters",
                    "type": "Object",
                    "props": [
                        {
                            "name": "hostName",
                            "description": "- Name of the host to connect with",
                            "type": "String"
                        },
                        {
                            "name": "hostPort",
                            "description": "- Port number to connect with",
                            "type": "Integer"
                        },
                        {
                            "name": "url",
                            "description": "- The URL used to connect (created, or used if supplied)",
                            "type": "String"
                        },
                        {
                            "name": "socket",
                            "description": "- Pre-connected socket.io socket to a Monitor server.",
                            "type": "Io.socket"
                        },
                        {
                            "name": "gateway",
                            "description": "- Allow this connection to use me as a gateway (default false)",
                            "type": "Boolean"
                        },
                        {
                            "name": "firewall",
                            "description": "Firewall inbound probe requests on this connection?",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "connection  - The added connection",
                "type": "Connection"
            },
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 207,
            "description": "Remove a connection from the router.\n\nThis is called to remove the connection and associated routes from the router.",
            "itemtype": "method",
            "name": "removeConnection",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "connection",
                    "description": "- The connection to remove",
                    "type": "Connection"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 224,
            "description": "Connect a Monitor object to a remote Probe\n\nThis accepts an instance of a Monitor and figures out how to connect it\nto a running Probe.\n\nUpon callback the probe data is set into the monitor (unless an error\noccurred)",
            "itemtype": "method",
            "name": "connectMonitor",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "monitor",
                    "description": "- The monitor requesting to connect with the probe",
                    "type": "Monitor"
                },
                {
                    "name": "callback",
                    "description": "- (optional) Called when connected",
                    "type": "Function(error)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 292,
            "description": "Disconnect a monitor\n\nThis accepts an instance of a connected monitor, and disconnects it from\nthe remote probe.\n\nThe probe implementation will be released if this is the only monitor\nobject watching it.",
            "itemtype": "method",
            "name": "disconnectMonitor",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "monitor",
                    "description": "- The connected monitor",
                    "type": "Monitor"
                },
                {
                    "name": "reason",
                    "description": "- Reason for the disconnect",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- (optional) Called when connected",
                    "type": "Function(error)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 333,
            "description": "Build a probe key from the probe data",
            "itemtype": "method",
            "name": "buildProbeKey",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "probeJSON",
                    "description": "- An object containing:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "probeClass",
                            "description": "- The probe class name (required)",
                            "type": "String"
                        },
                        {
                            "name": "initParams",
                            "description": "- Probe initialization parameters (if any)",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "return": {
                "description": "probeKey  - A string identifying the probe",
                "type": "String"
            },
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 353,
            "description": "Determine the connection to use for a probe\n\nThis uses the connection parameters of the specified monitor to determine\n(or create) the connection to use for the probe.\n\nIf the probe can be instantiated internally, a null is returned as the\nconnection.\n\nThis attempts to use an existing connection if available.  If not, a\nconnection attempt will be made with the host. If the host cannot be\nreached directly, it returns a connection with the gateway.",
            "itemtype": "method",
            "name": "determineConnection",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "monitorJSON",
                    "description": "- The connection attributes of the monitor",
                    "type": "Object"
                },
                {
                    "name": "makeNewConnections",
                    "description": "- Establish a new connection if one doesn't exist?",
                    "type": "Boolean"
                },
                {
                    "name": "callback",
                    "description": "- Called when the connection is known\n<ul>\n  <li>error - Set if any errors</li>\n  <li>connection - The connection object, or null to run in this process</li>\n<ul>",
                    "type": "Function(error, connection)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 503,
            "description": "Find an existing connection to use\n\nThis method looks into the existing known connections to find one\nthat matches the specified parameters.\n\nFirewalled connections are not returned.",
            "itemtype": "method",
            "name": "findConnection",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "hostName",
                    "description": "- Host name to find a connection for (null = any host)",
                    "type": "String"
                },
                {
                    "name": "appName",
                    "description": "- App name to find a connection with (null = any app)",
                    "type": "String"
                },
                {
                    "name": "appInstance",
                    "description": "- Application instance running on this host (null = any instance)",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "connection  - A Connection object if found, otherwise null",
                "type": "Connection"
            },
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 533,
            "description": "Find all connections matching the selection criteria\n\nThis method looks into the existing known connections to find all\nthat match the specified parameters.\n\nFirewalled connections are not returned.",
            "itemtype": "method",
            "name": "findConnections",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "hostName",
                    "description": "- Host name to search for (null = any host)",
                    "type": "String"
                },
                {
                    "name": "appName",
                    "description": "- App name to search for (null = any app)",
                    "type": "String"
                }
            ],
            "return": {
                "description": "connections  - An array of Connection objects matching the criteria",
                "type": "Array of Connection"
            },
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 561,
            "description": "Add connections for the specified host\n\nThis performs a scan of monitor ports on the server, and adds connections\nfor newly discovered servers.\n\nIt can take a while to complete, and if called for the same host before\ncompletion, it will save the callback and call all callbacks when the\noriginal task is complete.",
            "itemtype": "method",
            "name": "addHostConnections",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "hostName",
                    "description": "- The host to add connections with",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- Called when complete",
                    "type": "Function(error)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 632,
            "description": "Connect to an internal probe implementation\n\nThis connects with a probe running in this process.  It will instantiate\nthe probe if it isn't currently running.",
            "itemtype": "method",
            "name": "connectInternal",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "monitorJSON",
                    "description": "- The monitor toJSON data.  Containing:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "probeClass",
                            "description": "- The probe class name to connect with (required)",
                            "type": "String"
                        },
                        {
                            "name": "initParams",
                            "description": "- Probe initialization parameters.",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "- Called when connected",
                    "type": "Function(error, probeImpl)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 723,
            "description": "Disconnect with an internal probe implementation.",
            "itemtype": "method",
            "name": "disconnectInternal",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "probeId",
                    "description": "- The probe implementation ID to disconnect",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- Called when disconnected",
                    "type": "Function(error, probeImpl)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 750,
            "description": "Connect to an external probe implementation.\n\nThis connects with a probe running in another process.  It will\ncoordinate the remote instantiation of the probe if it's not running.",
            "itemtype": "method",
            "name": "connectExternal",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "monitorJSON",
                    "description": "- An object containing:",
                    "type": "Object",
                    "props": [
                        {
                            "name": "probeClass",
                            "description": "- The probe class name (required)",
                            "type": "String"
                        },
                        {
                            "name": "initParams",
                            "description": "- Probe initialization parameters (if any)",
                            "type": "Object"
                        }
                    ]
                },
                {
                    "name": "connection",
                    "description": "- The connection to use",
                    "type": "Connection"
                },
                {
                    "name": "callback",
                    "description": "- Called when connected",
                    "type": "Function(error, probeProxy)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Router.js",
            "line": 814,
            "description": "Disconnect with an external probe implementation.",
            "itemtype": "method",
            "name": "disconnectExternal",
            "access": "protected",
            "tagname": "",
            "params": [
                {
                    "name": "connection",
                    "description": "- The connection to use",
                    "type": "Connection"
                },
                {
                    "name": "probeId",
                    "description": "- Probe ID",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "- Called when disconnected",
                    "type": "Function(error)"
                }
            ],
            "class": "Router",
            "module": "Monitor"
        },
        {
            "file": "lib/Server.js",
            "line": 52,
            "description": "Start accepting monitor connections\n\nThis method starts listening for incoming monitor connections on the\nserver.\n\nIf the server was specified during object creation, this binds the\nsocket.io service to the server.\n\nIf the server was not specified during object creation, this will create\na server on the first available monitor port.",
            "itemtype": "method",
            "name": "start",
            "params": [
                {
                    "name": "options",
                    "description": "- Start options. OPTIONAL",
                    "type": "Object",
                    "props": [
                        {
                            "name": "port",
                            "description": "- Port to attempt listening on if server isn't specified.  Default: 42000",
                            "type": "Integer"
                        },
                        {
                            "name": "attempt",
                            "description": "- Attempt number for internal recursion detection.  Default: 1",
                            "type": "Integer"
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "- Called when the server is accepting connections.",
                    "type": "Function(error)"
                }
            ],
            "class": "Server",
            "module": "Monitor"
        },
        {
            "file": "lib/Server.js",
            "line": 70,
            "description": "The server has started\n\nThis event is fired when the server has determined the port to accept\nconnections on, and has successfully configured the server to start\naccepting new monitor connections.",
            "itemtype": "event",
            "name": "start",
            "class": "Server",
            "module": "Monitor"
        },
        {
            "file": "lib/Server.js",
            "line": 79,
            "description": "A client error has been detected\n\nThis event is fired if an error has been detected in the underlying\ntransport.  It may indicate message loss, and may result in a\nsubsequent stop event if the connection cannot be restored.",
            "itemtype": "event",
            "name": "error",
            "class": "Server",
            "module": "Monitor"
        },
        {
            "file": "lib/Server.js",
            "line": 154,
            "description": "Bind incoming socket events to the server\n\nThis method binds to the socket events and attaches the socket.io\nserver.  It is called when the connection starts listening.",
            "access": "protected",
            "tagname": "",
            "itemtype": "method",
            "name": "bindEvents",
            "params": [
                {
                    "name": "callback",
                    "description": "- Called when all events are bound",
                    "type": "Function(error)"
                }
            ],
            "class": "Server",
            "module": "Monitor"
        },
        {
            "file": "lib/Server.js",
            "line": 204,
            "description": "Stop processing inbound monitor traffic\n\nThis method stops accepting new inbound monitor connections, and closes\nall existing monitor connections associated with the server.",
            "itemtype": "method",
            "name": "stop",
            "params": [
                {
                    "name": "callback",
                    "description": "- Called when the server has stopped",
                    "type": "Function(error)"
                }
            ],
            "class": "Server",
            "module": "Monitor"
        },
        {
            "file": "lib/Server.js",
            "line": 213,
            "description": "The server has stopped\n\nThis event is fired after the server has stopped accepting inbound\nconnections, and has closed all existing connections and released\nassociated resources.",
            "itemtype": "event",
            "name": "stop",
            "class": "Server",
            "module": "Monitor"
        },
        {
            "file": "lib/Server.js",
            "line": 245,
            "description": "Constructor for a list of Server objects\n\n    var myList = new Server.List(initialElements);",
            "static": 1,
            "itemtype": "method",
            "name": "List",
            "params": [
                {
                    "name": "items",
                    "description": "Initial list items.  These can be raw JS objects or Server data model objects.",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Collection of Server data model objects",
                "type": "Backbone.Collection"
            },
            "class": "Server",
            "module": "Monitor"
        },
        {
            "file": "lib/Stat.js",
            "line": 128,
            "description": "Increment a counter by a specified value\n\nAssuming someone is listening to this stat, this is an instruction for that\nlistener to add the specified value (usually 1) to their prior value for this stat.\n\nThis is known as server-side setting, as the server (listener) is responsible\nfor maintaining the prior and new value for the stat.",
            "itemtype": "method",
            "name": "increment",
            "params": [
                {
                    "name": "name",
                    "description": "Dot.separated name of the counter to increment",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Amount to increment the counter by.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "Stat",
            "module": "Monitor"
        },
        {
            "file": "lib/Stat.js",
            "line": 146,
            "description": "Decrement a counter by a specified value\n\nAssuming someone is listening to this stat, this is an instruction for that\nlistener to subtract the specified value (usually 1) to their prior value for this stat.\n\nThis is known as server-side setting, as the server (listener) is responsible\nfor maintaining the prior and new value for the stat.",
            "itemtype": "method",
            "name": "decrement",
            "params": [
                {
                    "name": "name",
                    "description": "Dot.separated name of the counter to decrement",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Amount to decrement the counter by.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "Stat",
            "module": "Monitor"
        },
        {
            "file": "lib/Stat.js",
            "line": 164,
            "description": "Set the stat to the specified value\n\nThis is an instruction to any (all) listener(s) to set the stat to a\nspecific value.\n\nThis is known as client-side setting, because the client determines the value\nof the stat.",
            "itemtype": "method",
            "name": "gauge",
            "params": [
                {
                    "name": "name",
                    "description": "Dot.separated name of the stat",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Number to set the gauge to",
                    "type": "Number"
                }
            ],
            "class": "Stat",
            "module": "Monitor"
        },
        {
            "file": "lib/Stat.js",
            "line": 181,
            "description": "Record the specified duration (in milliseconds) for the stat\n\nThis is like Stat.gauge() in that it is a client-side setting of a\nspecified value.  The difference is the scale of the value is specified\nas milliseconds.\n\nThis may be one of the most widely used stat methods.  It can (should?) be\nused upon callback from asynchronous methods.\n\nPattern:\n\n    var stat = require('monitor').getStatLogger('myModule');\n    ...\n    var stamp = Date.now();\n    SomeAsyncFunction(arg1, function(error) {\n      stat.time('SomeAsyncFunction.time', Date.Now() - stamp);\n      ...continue with error handling & callback handling\n    });",
            "itemtype": "method",
            "name": "time",
            "params": [
                {
                    "name": "name",
                    "description": "Dot.separated name of the stat",
                    "type": "String"
                },
                {
                    "name": "duration",
                    "description": "Number of milliseconds this stat took to complete",
                    "type": "Integer"
                }
            ],
            "class": "Stat",
            "module": "Monitor"
        },
        {
            "file": "lib/Stat.js",
            "line": 209,
            "description": "Send the stat to all registered listeners",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "emit",
            "params": [
                {
                    "name": "module",
                    "description": "Module name",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Stat name",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "Stat value",
                    "type": "Numeric"
                },
                {
                    "name": "type",
                    "description": "Enumeration.  One of the following:\n  'c'  - Counter.  + values increment, - values decrement\n  'g'  - Gague.  Statistic is recorded as provided\n  'ms' - Timer.  Millisecond amount of time something took",
                    "type": "String"
                }
            ],
            "class": "Stat",
            "module": "Monitor"
        },
        {
            "file": "lib/Stat.js",
            "line": 260,
            "description": "Build a regex from a user entered string following the pattern described\nin the class definition.  Loosely:\n\n   If it looks like a JS regexp, process it as a regexp\n   Change all '.' to '\\.'\n   Change all '*' to '[^\\.]*' (unless it's at the end, then convert to '.*')\n   Change all {one,two} to (one|two)\n   Leave all [...] alone - they work as-is\n\n If an error occurs, throw an exception",
            "access": "private",
            "tagname": "",
            "static": 1,
            "itemtype": "method",
            "name": "_buildRegex",
            "params": [
                {
                    "name": "str",
                    "description": "String to build the regular expression from",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The regular expression object",
                "type": "RegExp"
            },
            "class": "Stat",
            "module": "Monitor"
        },
        {
            "file": "lib/Sync.js",
            "line": 19,
            "description": "Probe based data synchronization with server-side storage.\n\nThis method returns a function conforming to the Backbone\n<a href=\"http://documentcloud.github.com/backbone/#Sync\">Sync</a>\nAPI, offering\n<a href=\"http://documentcloud.github.com/backbone/#Model-fetch\">```fetch```</a>,\n<a href=\"http://documentcloud.github.com/backbone/#Model-save\">```save```</a>, and\n<a href=\"http://documentcloud.github.com/backbone/#Model-destroy\">```destroy```</a>\nfunctionality to any Backbone data model.\n\nThe returned function can be assigned to the ```sync``` element when defining the\ndata model:\n\n    var BlogEntry = Backbone.Model.extend({\n      ...\n      sync: Monitor.Sync('BlogEntry'),\n      ...\n    });\n\nThe sync function can also be assigned to any Backbone model after construction:\n\n    var myBook = new Book({id:\"44329\"});\n    myBook.sync = Monitor.Sync('Book');\n    myBook.fetch();\n\nIn addition to providing the standard ```fetch```, ```save```, and ```destroy```\nfunctionality, Sync offers *live data synchronization*, updating the data model\nas changes are detected on the server.\n\n    // Turn on live data synchronization\n    myBook.fetch({liveSync:true});\n\nThis fetches the ```myBook``` instance with the contents of the Book class\nid ```44329```, persists local changes to ```myBook```, and keeps ```myBook```\nup to date with changes detected on the server.\n\nLive data synchronization consumes resources on both the client and server.\nTo release those resources, make sure to call the ```clear()``` method on\nthe data model. Otherwise, resources are released when the server connection\nis terminated.\n\n    // Clear the object, turning off live synchronization\n    myBook.clear();\n\nSee the <a href=\"http://documentcloud.github.com/backbone/#Sync\">Backbone documentation</a>\nfor more information about the Backbone.sync functionality.",
            "static": 1,
            "itemtype": "method",
            "name": "Sync",
            "params": [
                {
                    "name": "className",
                    "description": "Name of the class to synchronize with",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Additional sync options",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "hostName",
                            "description": "Host name to use for the Sync probe.\n      If not specified, the closest server hosting Sync probe will be\n      determined (this server, or the default gateway)",
                            "type": "String"
                        },
                        {
                            "name": "appName",
                            "description": "Server appName (see Monitor.appName)",
                            "type": "String"
                        },
                        {
                            "name": "appInstance",
                            "description": "Application instance (see Monitor.appInstance)",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A sync method to assign to a Backbone class or instance.",
                "type": "Sync"
            },
            "class": "Sync",
            "module": "Monitor"
        },
        {
            "file": "lib/Sync.js",
            "line": 119,
            "description": "Provide the sync API to a backbone data model\n\nSee the <a href=\"http://documentcloud.github.com/backbone/#Sync\">Backbone documentation</a>\nfor more information on this method.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_sync",
            "params": [
                {
                    "name": "method",
                    "description": "A CRUD enumeration of \"create\", \"read\", \"update\", or \"delete\"",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The model or collection to act upon",
                    "type": "Backbone.Model or Backbone.Collection"
                },
                {
                    "name": "options",
                    "description": "Success and error callbacks, and additional options to\n  pass on to the sync implementation.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "liveSync",
                            "description": "- Turn on the live update functionality",
                            "optional": true
                        },
                        {
                            "name": "success",
                            "description": "- The method to call on method success",
                            "optional": true
                        },
                        {
                            "name": "error",
                            "description": "- The method to call on method error",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "Sync",
            "module": "Monitor"
        },
        {
            "file": "lib/Sync.js",
            "line": 197,
            "description": "Connect and send the control message to a Sync probe for this class.\n\nThis creates a monitor to a Sync probe with the specified className.\nThe monitor is used to send CRUD control messages for any ID within\nthe class.\n\nOnce connected, it sends the specified control message to the probe.\n\nThis monitor is used for non-liveSync interactions.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_connectClassMonitor",
            "params": [
                {
                    "name": "method",
                    "description": "The requested CRUD method",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The data model to perform the operation on",
                    "type": "Backbone.Model"
                },
                {
                    "name": "callback",
                    "description": "- Called when connected",
                    "type": "Function(error, params)",
                    "props": [
                        {
                            "name": "error",
                            "description": "- Set if it couldn't connect",
                            "type": "Mixed"
                        },
                        {
                            "name": "params",
                            "description": "- Updated data model parameters",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Sync",
            "module": "Monitor"
        },
        {
            "file": "lib/Sync.js",
            "line": 235,
            "description": "Connect and send the control message to a liveSync monitor for the model\n\nThis creates a monitor to a Sync probe for the model instance, and\nattaches event listeners onto the monitor and the data model.\n\nOnce connected, it sends the specified control message to the probe.\n\nChanges on the server are automatically propagated to the local\ndata model, and local changes to the data model are automatically\npropagated to the server.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_connectInstanceMonitor",
            "params": [
                {
                    "name": "method",
                    "description": "The requested CRUD method",
                    "type": "String"
                },
                {
                    "name": "model",
                    "description": "The data model to perform the operation on",
                    "type": "Backbone.Model"
                },
                {
                    "name": "callback",
                    "description": "- Called when connected",
                    "type": "Function(error, params)",
                    "props": [
                        {
                            "name": "error",
                            "description": "- Set if it couldn't connect",
                            "type": "Mixed"
                        },
                        {
                            "name": "params",
                            "description": "- Updated data model parameters",
                            "type": "Object"
                        }
                    ]
                }
            ],
            "class": "Sync",
            "module": "Monitor"
        },
        {
            "file": "lib/Sync.js",
            "line": 364,
            "description": "Prepare the control options\n\nThis prepares the control options to include the ID element\non a fetch or delete, and the entire model on a create or\nupdate.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getOpts",
            "params": [
                {
                    "name": "method",
                    "description": "One of the CRUD methods",
                    "type": "Enum"
                },
                {
                    "name": "model",
                    "description": "The model to prepare the opts from",
                    "type": "Backbone.Model"
                }
            ],
            "return": {
                "description": "The options object to pass to the probe",
                "type": "Object"
            },
            "class": "Sync",
            "module": "Monitor"
        },
        {
            "file": "lib/Sync.js",
            "line": 392,
            "description": "Prepare the init parameters for a monitor to a Sync probe\n\nThe monitor init params for the class monitor and the liveSync\nmodel monitor only differ in the modelId, so this method was\nbroken out to reduce code duplication.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_getMonitorParams",
            "params": [
                {
                    "name": "modelId",
                    "description": "Id to the data model.  If set, then params\n  will be built for liveSync to a data model with that id.\n  params for the class.",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "The monitor parameters",
                "type": "Object"
            },
            "class": "Sync",
            "module": "Monitor"
        },
        {
            "file": "test/ConnectionTest.js",
            "line": 17,
            "description": "Test group for connection functionality",
            "itemtype": "method",
            "name": "Connection",
            "class": "ConnectionTest",
            "module": "Monitor"
        },
        {
            "file": "test/ConnectionTest.js",
            "line": 23,
            "description": "Create a <a href=\"Server.html\">Server</a> to test connections with",
            "itemtype": "method",
            "name": "Connection-setUp",
            "class": "ConnectionTest",
            "module": "Monitor"
        },
        {
            "file": "test/ConnectionTest.js",
            "line": 32,
            "description": "Tests that the Connection classes are available",
            "itemtype": "method",
            "name": "Connection-Classes",
            "class": "ConnectionTest",
            "module": "Monitor"
        },
        {
            "file": "test/ConnectionTest.js",
            "line": 42,
            "description": "Assure that a connect / disconnect to the server host/port works",
            "itemtype": "method",
            "name": "Connection-ConnectDisconnect",
            "class": "ConnectionTest",
            "module": "Monitor"
        },
        {
            "file": "test/ConnectionTest.js",
            "line": 55,
            "description": "Test pinging the remote connection",
            "itemtype": "method",
            "name": "Connection-PingPong",
            "class": "ConnectionTest",
            "module": "Monitor"
        },
        {
            "file": "test/ConnectionTest.js",
            "line": 71,
            "description": "Tear down the test Server",
            "itemtype": "method",
            "name": "Connection-tearDown",
            "class": "ConnectionTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 37,
            "description": "Test group for baseline FileProbe functionality",
            "itemtype": "method",
            "name": "FileProbe",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 44,
            "description": "Tests that classes are in correct",
            "itemtype": "method",
            "name": "FileProbe-Classes",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 54,
            "description": "Tests that public static methods are in place",
            "itemtype": "method",
            "name": "FileProbe-Static",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 71,
            "description": "Test group for static file/directory utilities",
            "itemtype": "method",
            "name": "Utils",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 78,
            "description": "Test the mkdir_r utility",
            "itemtype": "method",
            "name": "Utils-Mkdir_R",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 91,
            "description": "Test the rm_rf utility",
            "itemtype": "method",
            "name": "Utils-Rm_Rf",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 118,
            "description": "Tests the file watch functionality",
            "itemtype": "method",
            "name": "Utils-Watch",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 142,
            "description": "Tests the polling style file watching mechanism",
            "itemtype": "method",
            "name": "Utils-PollingWatcher",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 166,
            "description": "Tests the watchLoad functionality",
            "itemtype": "method",
            "name": "Utils-WatchLoad",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 199,
            "description": "Test group for File based probe functionality",
            "itemtype": "method",
            "name": "Probe",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 221,
            "description": "Tests the ROOT_PATH functionality",
            "itemtype": "method",
            "name": "Probe-RootPath",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 241,
            "description": "This tests the File probe initializes properly",
            "itemtype": "method",
            "name": "Probe-Init",
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/FileProbeTest.js",
            "line": 273,
            "description": "Write the test file to disk, with possible appendage",
            "static": 1,
            "itemtype": "method",
            "name": "writeTestFile",
            "params": [
                {
                    "name": "append",
                    "description": "String to append onto the standard test file",
                    "type": "String"
                },
                {
                    "name": "wait",
                    "description": "Number of milliseconds to wait before writing",
                    "type": "Integer"
                }
            ],
            "class": "FileProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/InspectTest.js",
            "line": 17,
            "description": "Test group for baseline Inspect probe functionality",
            "itemtype": "method",
            "name": "Inspect",
            "class": "InspectTest",
            "module": "Monitor"
        },
        {
            "file": "test/InspectTest.js",
            "line": 24,
            "description": "Tests that classes are in correct",
            "itemtype": "method",
            "name": "Inspect-Classes",
            "class": "InspectTest",
            "module": "Monitor"
        },
        {
            "file": "test/InspectTest.js",
            "line": 35,
            "description": "Tests the no-param constructor",
            "itemtype": "method",
            "name": "Inspect-NoParams",
            "class": "InspectTest",
            "module": "Monitor"
        },
        {
            "file": "test/InspectTest.js",
            "line": 54,
            "description": "Tests the key parameter as a global variable",
            "itemtype": "method",
            "name": "Inspect-KeyVariable",
            "class": "InspectTest",
            "module": "Monitor"
        },
        {
            "file": "test/InspectTest.js",
            "line": 76,
            "description": "Tests the key parameter as an expression",
            "itemtype": "method",
            "name": "Inspect-KeyExpression",
            "class": "InspectTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 18,
            "description": "Test group for baseline Log functionality",
            "itemtype": "method",
            "name": "Log",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 28,
            "description": "Tests that Log class is in place",
            "itemtype": "method",
            "name": "Log-Classes",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 37,
            "description": "Tests that registering for '*' emits all logs",
            "itemtype": "method",
            "name": "Log-AllLogs",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 53,
            "description": "Tests for the inclusion of multiple arguments in logs",
            "itemtype": "method",
            "name": "Log-MultiArg",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 73,
            "description": "Tests for the trace log",
            "itemtype": "method",
            "name": "Log-trace",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 89,
            "description": "Tests for the debug log",
            "itemtype": "method",
            "name": "Log-debug",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 105,
            "description": "Tests for the info log",
            "itemtype": "method",
            "name": "Log-info",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 121,
            "description": "Tests for the warn log",
            "itemtype": "method",
            "name": "Log-warn",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 137,
            "description": "Tests for the error log",
            "itemtype": "method",
            "name": "Log-error",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 153,
            "description": "Tests for the fatal log",
            "itemtype": "method",
            "name": "Log-fatal",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 169,
            "description": "Make sure a stat is output for every log",
            "itemtype": "method",
            "name": "Log-Stat",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 186,
            "description": "Tests the Log probe",
            "itemtype": "method",
            "name": "Log-ProbeTest",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/LogTest.js",
            "line": 218,
            "description": "Tests the probe streams multiple items at once",
            "itemtype": "method",
            "name": "Log-ProbeStream",
            "class": "LogTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 36,
            "description": "Tests for verifying modules are loaded and exposed properly",
            "itemtype": "method",
            "name": "ModuleLoad",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 46,
            "description": "Tests that externals dependencies are exposed",
            "itemtype": "method",
            "name": "ModuleLoad-Externals",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 58,
            "description": "Tests that Monitor is exposed and of the correct type",
            "itemtype": "method",
            "name": "ModuleLoad-Monitor",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 68,
            "description": "Tests that all Sub Modules are exposed and of the correct type",
            "itemtype": "method",
            "name": "ModuleLoad-Submodules",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 82,
            "description": "Tests for internal (protected) methods",
            "itemtype": "method",
            "name": "Protected",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 88,
            "description": "Test UUID generation",
            "itemtype": "method",
            "name": "Protected-UUID",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 105,
            "description": "Tests that the Router is available",
            "itemtype": "method",
            "name": "Protected-Router",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 116,
            "description": "## Tests for the toJSON methods",
            "itemtype": "method",
            "name": "JSON",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 122,
            "description": "Tests that toJSON produces both monitor an probe attributes",
            "itemtype": "method",
            "name": "JSON-toJSON",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 133,
            "description": "Test that toMonitorJSON produces only monitor attributes",
            "itemtype": "method",
            "name": "JSON-toMonitorJSON",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 144,
            "description": "Test that toProbeJSON produces only monitor attributes",
            "itemtype": "method",
            "name": "JSON-toProbeJSON",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 161,
            "description": "## Tests for connecting and disconnecting with probes",
            "itemtype": "method",
            "name": "Connection",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 167,
            "description": "Test connecting with internal probes",
            "itemtype": "method",
            "name": "Connection-Internal",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/MonitorTest.js",
            "line": 199,
            "description": "Test the stringify method",
            "itemtype": "method",
            "name": "Stringify",
            "class": "MonitorTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 17,
            "description": "Tests for Probe functionality",
            "itemtype": "method",
            "name": "ProbeTest",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 25,
            "description": "Tests that Probe classes are in place",
            "itemtype": "method",
            "name": "ProbeTest-Classes",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 36,
            "description": "Tests Probe instantiation",
            "itemtype": "method",
            "name": "ProbeTest-Instantiate",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 49,
            "description": "Test the same ID on subsequent probe instantiation with similar init params",
            "itemtype": "method",
            "name": "ProbeTest-SameProbe",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 64,
            "description": "Test that different init params result in a different probe",
            "itemtype": "method",
            "name": "ProbeTest-DifferentProbe",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 79,
            "description": "Tests remote control functionality",
            "itemtype": "method",
            "name": "ProbeTest-RemoteControl",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 92,
            "description": "Test remote control failure (no control method)",
            "itemtype": "method",
            "name": "ProbeTest-RemoteControlFail",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 104,
            "description": "Test the change event",
            "itemtype": "method",
            "name": "ProbeTest-ChangeEvent",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/ProbeTest.js",
            "line": 119,
            "description": "Tests that Probe clean up works",
            "itemtype": "method",
            "name": "ProbeTest-Cleanup",
            "class": "ProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 19,
            "description": "Tests for baseline Router functionality",
            "itemtype": "method",
            "name": "Router",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 26,
            "description": "Create a <a href=\"Server.html\">Server</a> to test routing with",
            "itemtype": "method",
            "name": "Router-SetUp",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 36,
            "description": "Tests that Router classes are in place",
            "itemtype": "method",
            "name": "Router-Classes",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 45,
            "description": "Test that the router finds an internal probe",
            "itemtype": "method",
            "name": "Router-ConnectInternal",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 59,
            "description": "Test that the same probe is connected when requested with the same initParams",
            "itemtype": "method",
            "name": "Router-InternalSameProbe",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 74,
            "description": "Test that different probes are connected when requested with the different initParams",
            "itemtype": "method",
            "name": "Router-InternalDifferentProbe",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 89,
            "description": "Test that the router finds an external probe",
            "itemtype": "method",
            "name": "Router-ConnectExternal",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 103,
            "description": "Test the getConnection method returns the connection",
            "itemtype": "method",
            "name": "Router-GetConnection",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 114,
            "description": "Test that the same external probe is connected when requested with the same initParams",
            "itemtype": "method",
            "name": "Router-ExternalSameProbe",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 129,
            "description": "Test that different external probes are connected when requested with the different initParams",
            "itemtype": "method",
            "name": "Router-ExternalDifferentProbe",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 144,
            "description": "Test that the router can connect with a probe in an app by instance ID",
            "itemtype": "method",
            "name": "Router-ByAppInstance",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 162,
            "description": "Test that the local probe forwards change events",
            "itemtype": "method",
            "name": "Router-InternalChanges",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 177,
            "description": "Test that the remote probe forwards change events",
            "itemtype": "method",
            "name": "Router-ExternalChanges",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 192,
            "description": "Test that the router can route control an external probe",
            "itemtype": "method",
            "name": "Router-ControlExternal",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 205,
            "description": "Test that a disconnect to an internal probe works",
            "itemtype": "method",
            "name": "Router-DisconnectInternal",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 217,
            "description": "Test that a disconnect to an external probe works",
            "itemtype": "method",
            "name": "Router-DisconnectExternal",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 228,
            "description": "Test that the external connection:add event is fired on add.",
            "itemtype": "method",
            "name": "Router-ConnectionAddEvent",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 247,
            "description": "Test that the external connection:remove event is fired on connection remove.",
            "itemtype": "method",
            "name": "Router-ConnectionRemoveEvent",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/RouterTest.js",
            "line": 264,
            "description": "Tear down the test Server and disconnect the test probes",
            "itemtype": "method",
            "name": "Router-TearDown",
            "class": "RouterTest",
            "module": "Monitor"
        },
        {
            "file": "test/ServerTest.js",
            "line": 16,
            "description": "Test group for baseline Server functionality",
            "itemtype": "method",
            "name": "Server",
            "class": "ServerTest",
            "module": "Monitor"
        },
        {
            "file": "test/ServerTest.js",
            "line": 26,
            "description": "Tests that Server classes are in place",
            "itemtype": "method",
            "name": "Server-Classes",
            "class": "ServerTest",
            "module": "Monitor"
        },
        {
            "file": "test/ServerTest.js",
            "line": 36,
            "description": "Start and Stop a server",
            "itemtype": "method",
            "name": "Server-StartStop",
            "class": "ServerTest",
            "module": "Monitor"
        },
        {
            "file": "test/ServerTest.js",
            "line": 52,
            "description": "Verify multiple servers start on different ports",
            "itemtype": "method",
            "name": "Server-MultipleStartStop",
            "class": "ServerTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 17,
            "description": "Test group for baseline Stat functionality",
            "itemtype": "method",
            "name": "Stat",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 27,
            "description": "Tests that Stat class is in place",
            "itemtype": "method",
            "name": "Stat-Classes",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 36,
            "description": "Internal tests for Graphite type regular expressions",
            "itemtype": "method",
            "name": "Stat-GraphiteRegExp",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 96,
            "description": "Tests that registering for '*' emits all stats",
            "itemtype": "method",
            "name": "Stat-AllStats",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 113,
            "description": "Tests the gauge functionality",
            "itemtype": "method",
            "name": "Stat-Gauge",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 127,
            "description": "Tests the time stat",
            "itemtype": "method",
            "name": "Stat-Time",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 141,
            "description": "Tests the increment stat",
            "itemtype": "method",
            "name": "Stat-Increment",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 161,
            "description": "Tests the decrement stat",
            "itemtype": "method",
            "name": "Stat-Decrement",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 181,
            "description": "Tests the stat probe",
            "itemtype": "method",
            "name": "Stat-ProbeTest",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/StatTest.js",
            "line": 213,
            "description": "Tests the probe streams multiple items at once",
            "itemtype": "method",
            "name": "Stat-ProbeStream",
            "class": "StatTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 46,
            "description": "Test group for baseline SyncProbe functionality",
            "itemtype": "method",
            "name": "SyncProbe",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 53,
            "description": "Tests that classes are in correct",
            "itemtype": "method",
            "name": "SyncProbe-Classes",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 63,
            "description": "The server decides what specific type of SyncProbe to instantiate\nfor classes of data models.  When a SyncProbe is requested, the\nSyncProbe instance becomes an instance of a specific type.  This\ntests that this coersion is made.",
            "itemtype": "method",
            "name": "SyncProbe-Coerce",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 80,
            "description": "Test group for base Sync (non LiveSync) probe usage",
            "itemtype": "method",
            "name": "BaseSync",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 87,
            "description": "One time setup for BaseSync tests",
            "itemtype": "method",
            "name": "BaseSync-SetUp",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 101,
            "description": "Tests that a new object without an ID gets an ID assigned",
            "itemtype": "method",
            "name": "BaseSync-CreateWitoutId",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 115,
            "description": "Tests that a new object with an ID gets saved",
            "itemtype": "method",
            "name": "BaseSync-CreateWithId",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 129,
            "description": "Tests that a fetch by ID works",
            "itemtype": "method",
            "name": "BaseSync-FetchById",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 152,
            "description": "Tests the model.destroy functionality",
            "itemtype": "method",
            "name": "BaseSync-DestroyById",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 188,
            "description": "One time teardown up for BaseSync tests",
            "itemtype": "method",
            "name": "BaseSync-TearDown",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 200,
            "description": "Test group for Live model synchronization",
            "itemtype": "method",
            "name": "LiveSync",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 207,
            "description": "One time setup for LiveSync tests",
            "itemtype": "method",
            "name": "LiveSync-SetUp",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 226,
            "description": "Tests LiveSync connection",
            "itemtype": "method",
            "name": "LiveSync-Connect",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 240,
            "description": "Tests LiveSync disconnect",
            "itemtype": "method",
            "name": "LiveSync-Disconnect",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 255,
            "description": "Tests that a client change in the data model persists to the server",
            "itemtype": "method",
            "name": "LiveSync-ClientChange",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 277,
            "description": "Tests that a server change propagates the data to the client with a change event",
            "itemtype": "method",
            "name": "LiveSync-ServerChange",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 305,
            "description": "Tests that a backend deletion is detected",
            "itemtype": "method",
            "name": "LiveSync-ServerDelete",
            "class": "SyncProbeTest",
            "module": "Monitor"
        },
        {
            "file": "test/SyncProbeTest.js",
            "line": 330,
            "description": "One time teardown up for BaseSync tests",
            "itemtype": "method",
            "name": "LiveSync-TearDown",
            "class": "SyncProbeTest",
            "module": "Monitor"
        }
    ]
}