{
  "name": "feedsub",
  "description": "Reads online RSS/Atom/JSON feeds notifying on new items.",
  "keywords": [
    "feed",
    "rss",
    "atom",
    "json",
    "subscribe"
  ],
  "version": "0.2.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-feedsub.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/feedsub.js",
  "scripts": {
    "test": "mocha -R spec test/*-test.js"
  },
  "dependencies": {
    "feedme": "~0.2.3",
    "newsemitter": "~0.1.1",
    "request": "~2.9.203",
    "underscore": "~1.1.7"
  },
  "devDependencies": {
    "nock": "0.13.x",
    "mocha": "x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/node-feedsub/raw/master/LICENSE"
    }
  ],
  "readme": "# FeedSub [![Build Status](https://secure.travis-ci.org/fent/node-feedsub.png)](http://travis-ci.org/fent/node-feedsub)\n\nFeedSub subscribes to a remote RSS/Atom/JSON feed and notifies you of any new items it reads.\n\nIt works by checking the feed every once in a while, comparing the date of the document via a conditional GET if supported. Otherwise it looks for a date tag in the feed. If it's the same as the last date, it stops downloading it and parsing the xml/json. If it's an updated document, then it looks through it top to bottom taking note of all the new items. Once it finds something it has already read, it stops downloading and parsing the document.\n\n\n# Usage\n\n```javascript\nvar FeedSub = require('feedsub');\n\nreader = new FeedSub('http://rss.cnn.com/rss/cnn_latest.rss', {\n  interval: 10 // check feed every 10 minutes\n});\n\nreader.on('item', function(item) {\n  console.log('Got item!');\n  console.dir(item);\n});\n\nreader.start();\n```\n\n# API\n### new FeedSub(feed, [options])\nCreates a new instance of FeedSub. `options` defaults to.\n\n```javascript\n{\n  // number of minutes to wait between checking the feed for new items\n  interval: 10,\n\n  // some feeds contain a `ttl` tag that specifies the\n  // number of minutes to cache the feed\n  // setting this to true will ignore that\n  forceInterval: false,\n\n  // if true, calls `reader.start()` on instanstiation\n  autoStart: false, \n\n  // emits items on the very first request\n  // after which, it should consider those items read\n  emitOnStart: false,\n\n  // keeps track of last date of the feed\n  lastDate: null,\n\n  // maximum size of `history` array\n  maxHistory: 10,\n\n  // some feeds have a `skipHours` tag with a list of\n  // hours in which the feed should not be read.\n  // if this is set to true and the feed has that tag, it obeys that rule\n  skipHours: false,\n\n  // same as `skipHours`, but with days\n  skipDays: false,\n\n  // options object passed to the http(s).get function\n  requestOpts: {}\n}\n```\n\n### FeedSub#read([callback(err, items)])\nReads the feed. Calls `callback` with possible error or new items discovered if provided. Causes `reader` to emit new item events.\n\n### FeedSub#readInterval([callback(err, items)], interval)\nCalls `reader.read` every `interval` milliseconds. If `callback` is an integer, it is considered the `interval`.\n\n### FeedSub#start()\nCalls `reader.readInterval()` with the `options.interval` from the constructor.\n\n### FeedSub#options\nOptions that were passed to the constructor along with any defaults are kept here.\n\n### FeedSub#stop()\nStops the reader from automatically reading the feed.\n\n### Event: 'item'\n`function (item) { }`\nEmitted whenever there is a new item.\n\n### Event: 'items'\n`function (items) { }`\nEmits all new items from one request in one array.\n\n### Event: 'error'\nEmitted when there is an error downloading or parsing the feed. Not emitted if `callback` is given for `read` or `readInterval`.\n\n\n# Install\n\n    npm install feedsub\n\n\n# Tests\n\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n\n# License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "feedsub@0.2.4",
  "_from": "feedsub@"
}
