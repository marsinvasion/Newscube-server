{
  "name": "newsemitter",
  "description": "An event emitter that emits only new events.",
  "keywords": [
    "event",
    "emitter",
    "event emitter",
    "publish",
    "subscribe",
    "pubsub"
  ],
  "version": "0.1.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/fent/node-newsemitter.git"
  },
  "author": {
    "name": "Roly Fentanes",
    "url": "https://github.com/fent"
  },
  "main": "./lib/index.js",
  "scripts": {
    "test": "mocha -R spec test/*-test.js"
  },
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": "*"
  },
  "devDependencies": {
    "mocha": "0.x.x"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/fent/node-newsemitter.js/raw/master/LICENSE"
    }
  ],
  "readme": "# node-newsemitter [![Build Status](https://secure.travis-ci.org/fent/node-newsemitter.png)](http://travis-ci.org/fent/node-newsemitter)\n\nAn event emitter that emits only new events. Because sometimes we don't care about old events.\n\n\n# Usage\n\n```js\nvar NewsEmitter = require('newsemitter');\nvar news = new NewsEmitter();\n\nnews.on('item', function(item) {\n  console.log('new item:', item.title);\n});\n\nnews.emit('item', { title: 'hello there' });\nnews.emit('item', { title: 'hello world' });\nnews.emit('item', { title: 'hello there' });\nnews.emit('item', { title: 'hey' });\nnews.emit('item', { title: 'hey' });\nnews.emit('item', { title: 'hey' });\n\n// new item: hello there\n// new item: hello world\n// new item: hey\n```\n\n# API\n### new NewsEmitter([options])\n\nCreates an instance of a NewsEmitter. `options` can be\n\n* `filter` - An array of events that will be affected. If not given, events names will not be filtered.\n* 'ignore' - An array of events that will be ignored. Defaults to `['newListener']`.\n* `maxHistory` - Maximum number of history items to remember. Default is `10`.\n* `manageHistory` - If true, does not add emitted events to history. Instead expects you to manually manage history with `addHistory()`. Defaults to `false`.\n* `comparator` - Function used to compare one event to another. Takes 2 arguments, first is possibly new arguments item, and second is item from history. Default is a deep equal function.\n\n### NewsEmitter#emit(event)\n\nEmits an event, only if it has not been emitted before. Returns true if item is new and emtted. False otherwise.\n\n### NewsEmitter#reset([event])\n\nResets history of an event. If no event given, resets all history.\n\n### NewsEmitter#addHistory(event, arr)\n\nAdds items in `arr` as `event`'s history. Truncated as necessary based on max history length considering the last item in the array as newest.\n\n\n# Install\n\n    npm install newsemitter\n\n\n# Tests\nTests are written with [mocha](http://visionmedia.github.com/mocha/)\n\n```bash\nnpm test\n```\n\n# License\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "newsemitter@0.1.1",
  "_from": "newsemitter@~0.1.1"
}
